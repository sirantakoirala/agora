[{"E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\index.js":"1","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\App.js":"2","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\context\\userContext.js":"3","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\PrivateRoute.js":"4","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Registration.js":"5","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Dashboard\\Dashboard.js":"6","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Quizzes\\Quizzes.js":"7","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Topic\\Topic.js":"8","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\User\\Profile.js":"9","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\History\\History.js":"10","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Quizzes\\Quiz.js":"11","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\firebase-config.js":"12","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Dashboard\\QuestionModal.js":"13","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Dashboard\\Sidebar.js":"14","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Dashboard\\SubjectModal.js":"15","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Dashboard\\QuizModal.js":"16","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Dashboard\\PostModal.js":"17","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Registration\\Login.js":"18","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Registration\\SignUp.js":"19"},{"size":416,"mtime":1650022507512,"results":"20","hashOfConfig":"21"},{"size":2018,"mtime":1652865860070,"results":"22","hashOfConfig":"21"},{"size":2287,"mtime":1652959421358,"results":"23","hashOfConfig":"21"},{"size":218,"mtime":1650028514590,"results":"24","hashOfConfig":"21"},{"size":1402,"mtime":1650028696413,"results":"25","hashOfConfig":"21"},{"size":7819,"mtime":1654696520258,"results":"26","hashOfConfig":"21"},{"size":1569,"mtime":1654693520885,"results":"27","hashOfConfig":"21"},{"size":10863,"mtime":1654694769456,"results":"28","hashOfConfig":"21"},{"size":10308,"mtime":1654695772635,"results":"29","hashOfConfig":"21"},{"size":2561,"mtime":1652963743382,"results":"30","hashOfConfig":"21"},{"size":5317,"mtime":1654696373302,"results":"31","hashOfConfig":"21"},{"size":738,"mtime":1652008840056,"results":"32","hashOfConfig":"21"},{"size":7172,"mtime":1654694498644,"results":"33","hashOfConfig":"21"},{"size":2070,"mtime":1654693362875,"results":"34","hashOfConfig":"21"},{"size":2544,"mtime":1654695126619,"results":"35","hashOfConfig":"21"},{"size":4764,"mtime":1654693593694,"results":"36","hashOfConfig":"21"},{"size":6273,"mtime":1654694862816,"results":"37","hashOfConfig":"21"},{"size":2200,"mtime":1654697155178,"results":"38","hashOfConfig":"21"},{"size":6856,"mtime":1654697136634,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1y21c6l",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"42"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"42"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\index.js",[],["92","93"],"E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\App.js",[],"E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\context\\userContext.js",["94"],"import { createContext, useState, useEffect, useContext } from \"react\";\r\n\r\nimport {\r\n  signInWithEmailAndPassword,\r\n  createUserWithEmailAndPassword,\r\n  onAuthStateChanged,\r\n  signOut as signout,\r\n  updatePassword,\r\n  updateEmail,\r\n} from \"firebase/auth\";\r\nimport { auth, db } from \"../firebase-config\";\r\nimport { collection, getDocs, query, where } from \"firebase/firestore\";\r\n\r\nexport const UserContext = createContext();\r\n\r\nexport function UserContextProvider(props) {\r\n  const updateUserPassword = (pwd) =>\r\n    updatePassword(pwd);\r\n  const updateUserEmail =(email) =>\r\n    updateEmail(email);\r\n  const signUp = (email, pwd) =>\r\n    createUserWithEmailAndPassword(auth, email, pwd);\r\n  const signIn = (email, pwd) => signInWithEmailAndPassword(auth, email, pwd);\r\n  const signOut = async () => await signout(auth);\r\n\r\n  const [currentUser, setCurrentUser] = useState();\r\n  const [loadingData, setLoadingData] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, async (curUser) => {\r\n      if (curUser) {\r\n        console.log(\"AAA\"+curUser.uid);\r\n\r\n        const userRole = await getDocs(\r\n          query(collection(db, \"users\"), where(\"uid\", \"==\", curUser.uid))\r\n        );\r\n        setCurrentUser({ ...curUser,\r\n          uid:userRole.docs[0].data().uid,\r\n          role: userRole.docs[0].data().role,\r\n          approval: userRole.docs[0].data().approval,\r\n          address:userRole.docs[0].data().address,\r\n          birthdate:userRole.docs[0].data().birthdate,\r\n          displayname:userRole.docs[0].data().uname,\r\n          email:userRole.docs[0].data().email,\r\n          uname:userRole.docs[0].data().uname,\r\n          phone:userRole.docs[0].data().phone,\r\n          avatar: userRole.docs[0].data().avatar,\r\n         });\r\n        //setCurrentUser({ ...currentUser, approval: userRole.docs[0].data().approval });\r\n\r\n      } else {\r\n        console.log(\"BBB\");\r\n        setCurrentUser(curUser);\r\n      }\r\n\r\n      setLoadingData(false);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  return (\r\n    <UserContext.Provider value={{updateUserPassword, signUp, currentUser, signIn, signOut }}>\r\n      {!loadingData && props.children}\r\n    </UserContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useUserContext = () => useContext(UserContext);\r\n","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\PrivateRoute.js",[],"E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Registration.js",["95"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Login } from \"./Registration/Login\";\r\nimport { SignUp } from \"./Registration/SignUp\";\r\nimport { Grid, Message } from \"semantic-ui-react\";\r\nimport { useUserContext } from \"../context/userContext\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst spanStyle = {\r\n  color: \"purple\",\r\n  textDecoration: \"underline\",\r\n  paddingLeft: 4,\r\n  cursor: \"pointer\",\r\n};\r\nexport const Registration = () => {\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const navigate = useNavigate();\r\n\r\n  const { currentUser } = useUserContext();\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      navigate(\"/dashboard\");\r\n    }\r\n  }, [currentUser]);\r\n  return (\r\n    <Grid textAlign=\"center\" style={{ height: \"100vh\" }} verticalAlign=\"middle\">\r\n      <Grid.Column style={{ maxWidth: 450 }}>\r\n        {isLogin ? <Login /> : <SignUp />}\r\n        <Message>\r\n          {isLogin ? (\r\n            <p>\r\n              New to us?\r\n              <span style={spanStyle} onClick={() => setIsLogin(false)}>\r\n                Sign Up\r\n              </span>\r\n            </p>\r\n          ) : (\r\n            <p>\r\n              Already registered?\r\n              <span style={spanStyle} onClick={() => setIsLogin(true)}>\r\n                Log in\r\n              </span>\r\n            </p>\r\n          )}\r\n        </Message>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Dashboard\\Dashboard.js",["96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119"],"import React, { useEffect, useState } from \"react\";\r\nimport { QuestionModal } from \"./QuestionModal\";\r\nimport { SubjectModal } from \"./SubjectModal\";\r\nimport \"../components/IconButton.css\";\r\n\r\nimport {\r\n  Message,\r\n  Card,\r\n  Icon,\r\n  Grid,\r\n  Button,\r\n  Label,\r\n  Menu,\r\n  Image,\r\n  Container,\r\n} from \"semantic-ui-react\";\r\nimport { Sidebar } from \"./Sidebar\";\r\n\r\nimport {\r\n  collection,\r\n  query,\r\n  onSnapshot,\r\n  orderBy,\r\n  getDocs,\r\n  updateDoc,\r\n  arrayUnion,\r\n  where,\r\n  doc,\r\n} from \"firebase/firestore\";\r\n\r\nimport { db } from \"../../firebase-config\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useUserContext } from \"../../context/userContext\";\r\nimport QuizModal from \"./QuizModal\";\r\nimport { signOut } from \"firebase/auth\";\r\nimport { auth } from \"../../firebase-config\";\r\nimport { findByLabelText } from \"@testing-library/react\";\r\n\r\nconst menuStyle = {\r\n  border: \"none\",\r\n  borderRadius: 0,\r\n  boxShadow: \"none\",\r\n  marginBottom: \"1em\",\r\n  marginTop: \"0em\",\r\n  display: \"flex\",\r\n  transition: \"box-shadow 0.5s ease, padding 0.5s ease\",\r\n};\r\nconst Dashboard = () => {\r\n  const [topics, setTopics] = useState([]);\r\n  const { currentUser } = useUserContext();\r\n  const [subjectOptions, setSubjectOptions] = useState([]);\r\n  const isNotStudentRole = currentUser.role !== \"student\";\r\n  const isNotAccpeted = currentUser.approval === \"No\";\r\n  useEffect(() => {\r\n    if (isNotAccpeted == true && isNotStudentRole == true) {\r\n      alert(\"Please wait Administrator's Approval\");\r\n      signOut(auth);\r\n    }\r\n    async function getTopics() {\r\n      try {\r\n        const q = query(collection(db, \"topics\"), orderBy(\"createdAt\", \"desc\"));\r\n\r\n        const unsub = await onSnapshot(q, (querySnapshot) => {\r\n          const topics = querySnapshot.docs.map((topic) => topic.data());\r\n          setTopics(topics);\r\n          {\r\n            topics.map((topic) => {\r\n              if (topic.likeId != null)\r\n                topic.likeIdCount = Object.keys(topic.likeId).length;\r\n              else topic.likeIdCount = 0;\r\n              if (topic.dislikeId != null)\r\n                topic.dislikeIdCount = Object.keys(topic.dislikeId).length;\r\n              else topic.dislikeIdCount = 0;\r\n            });\r\n          }\r\n        });\r\n\r\n        return unsub;\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n    return getTopics();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function getSubjects() {\r\n      const q = query(collection(db, \"subject\"));\r\n\r\n      const querySnapshot = await getDocs(q);\r\n      const subjects = querySnapshot.docs.map((doc, id) => ({\r\n        value: doc.data().title,\r\n        key: id,\r\n        text: doc.data().title,\r\n      }));\r\n      setSubjectOptions(subjects);\r\n    }\r\n    getSubjects();\r\n  }, []);\r\n\r\n  const handleLikeClick = async (ev, tid) => {\r\n    ev.preventDefault();\r\n    {\r\n      topics.map(async (topic) => {\r\n        if (topic.topicId == tid) {\r\n          if (\r\n            topic.likeId.includes(currentUser.uid) == false &&\r\n            topic.dislikeId.includes(currentUser.uid) == false\r\n          ) {\r\n            const topicDoc = doc(db, \"topics\", tid);\r\n            await updateDoc(topicDoc, {\r\n              likeId: arrayUnion(currentUser.uid),\r\n            });\r\n            topic.likeIdCount++;\r\n            topic.likeId.push(currentUser.uid);\r\n            setTopics((arr) => [...topics]);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n  const handledisLikeClick = async (ev, tid) => {\r\n    ev.preventDefault();\r\n\r\n    // if(currentUser.role != \"teacher\") return ;\r\n    {\r\n      topics.map(async (topic) => {\r\n        if (topic.topicId == tid) {\r\n          if (\r\n            topic.likeId.includes(currentUser.uid) == false &&\r\n            topic.dislikeId.includes(currentUser.uid) == false\r\n          ) {\r\n            const topicDoc = doc(db, \"topics\", tid);\r\n            await updateDoc(topicDoc, {\r\n              dislikeId: arrayUnion(currentUser.uid),\r\n            });\r\n            topic.dislikeIdCount++;\r\n            setTopics((arr) => [...topics]);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n  const checkIsTeacher = () => {\r\n    if (currentUser.role === \"teacher\") {\r\n      return false;\r\n    } else return true;\r\n  };\r\n  const setIconColor = (likeId, uId) => {\r\n    if (likeId != null && likeId.includes(uId) == true) return \"green\";\r\n    return \"black\";\r\n  };\r\n  const setUserIconColor = (user) => {\r\n    if (currentUser.displayname == user) return \"red\";\r\n    return \"black\";\r\n  };\r\n  return (\r\n    <>\r\n      <Sidebar>\r\n        <h1 style={{ textAlign: \"center\" }}>\r\n          Dashboard\r\n                  <Menu style={{ padding: \"10px 0\" }}>\r\n            {isNotStudentRole && (\r\n              <QuizModal\r\n                subjectOptions={subjectOptions}\r\n                currentUser={currentUser}\r\n              />\r\n            )}\r\n            {isNotStudentRole && <SubjectModal />}\r\n            <QuestionModal subjectOptions={subjectOptions} />\r\n          </Menu>\r\n        </h1>\r\n\r\n        <div>\r\n          <Grid columns=\"three\">\r\n            {topics.map((topic) => {\r\n              return (\r\n                <Grid.Column key={topic.topicId}>\r\n                  <Card\r\n                    as={Link}\r\n                    style={{ width: \"99%\" }}\r\n                    to={`/topic/${topic.topicId}`}\r\n                    header={\r\n                      <>\r\n                        <h2>\r\n                          {topic.topicTitle}\r\n                          {topic.haspinned == true && (\r\n                            <Icon\r\n                              name=\"check\"\r\n                              color=\"green\"\r\n                              style={{ display: \"flex\", float: \"right\" }}\r\n                            />\r\n                          )}\r\n                        </h2>\r\n                      </>\r\n                    }\r\n                    meta={topic.topicSubject}\r\n                    extra={\r\n                      <div>\r\n                        <div>\r\n                          <Icon\r\n                            color={setUserIconColor(topic.user)}\r\n                            name=\"user\"\r\n                          />\r\n                          {topic.user}\r\n                        </div>\r\n                        <div>\r\n                          <Button\r\n                            onClick={(e) => handleLikeClick(e, topic.topicId)}\r\n                          >\r\n                            <Icon\r\n                              color={setIconColor(\r\n                                topic.likeId,\r\n                                currentUser.uid\r\n                              )}\r\n                              name=\"thumbs up\"\r\n                            />\r\n                            {topic.likeIdCount}\r\n                          </Button>\r\n                          <Button\r\n                            onClick={(e) =>\r\n                              handledisLikeClick(e, topic.topicId)\r\n                            }\r\n                          >\r\n                            <Icon\r\n                              color={setIconColor(\r\n                                topic.dislikeId,\r\n                                currentUser.uid\r\n                              )}\r\n                              name=\"thumbs down\"\r\n                            />\r\n                            {topic.dislikeIdCount}\r\n                          </Button>\r\n                          <Button>\r\n                            <Icon color=\"black\" name=\"comment\" />\r\n                            {topic.comment}\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    }\r\n                  />\r\n                </Grid.Column>\r\n              );\r\n            })}\r\n          </Grid>\r\n        </div>\r\n      </Sidebar>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Quizzes\\Quizzes.js",["120","121","122"],"import { useUserContext } from \"../../context/userContext\";\r\nimport { db } from \"../../firebase-config\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  collection,\r\n  query,\r\n  onSnapshot,\r\n  orderBy,\r\n  getDocs,\r\n} from \"firebase/firestore\";\r\nimport { Card } from \"semantic-ui-react\";\r\nimport { Sidebar } from \"../Dashboard/Sidebar\";\r\nimport { Link } from \"react-router-dom\";\r\nexport const Quizzes = () => {\r\n  const [ subjectQuizzes, setSubjectQuizzes ] = useState( [] );\r\n  useEffect( () => {\r\n    async function getSubjects() {\r\n      const q = query( collection( db, \"subject\" ) );\r\n\r\n      const querySnapshot = await getDocs( q );\r\n      const subjects = querySnapshot.docs.map( ( doc ) => doc.data() );\r\n\r\n      setSubjectQuizzes( subjects );\r\n    }\r\n    getSubjects();\r\n  }, [] );\r\n  return (\r\n    <Sidebar>\r\n      <h1 style={{textAlign:'center'}}>Quiz Questions by Subject</h1>\r\n      <Card.Group>\r\n        { subjectQuizzes.map( ( quiz ) => {\r\n          return (\r\n            <Card\r\n              color=\"red\"\r\n              as={ Link }\r\n              to={ `/quiz/${ quiz.title }` }\r\n              style={ {\r\n                height: 150,\r\n                fontSize: 32,\r\n                fontWeight: \"bold\",\r\n                paddingTop: 20,\r\n                paddingLeft: 20,\r\n              } }\r\n            >\r\n              <h1>\r\n              { quiz.title }\r\n              </h1>\r\n              <h2>\r\n              {quiz.courseId}\r\n              </h2>\r\n            </Card>\r\n          );\r\n        } ) }\r\n      </Card.Group>\r\n    </Sidebar>\r\n  );\r\n};\r\n","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Topic\\Topic.js",["123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155"],"\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { PostModal } from \"../Dashboard/PostModal\"\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Sidebar } from \"../Dashboard/Sidebar\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  Form,\r\n  Card,\r\n  Icon,\r\n  Label,\r\n  Image,\r\n  TextArea,\r\n  Container,\r\n  Rail,\r\n  Divider,\r\n  Segment,\r\n  Header,\r\n} from \"semantic-ui-react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport {\r\n  collection,\r\n  query,\r\n  where,\r\n  getDocs,\r\n  addDoc,\r\n  deleteDoc,\r\n  serverTimestamp,\r\n  onSnapshot,\r\n  orderBy,\r\n  setDoc,\r\n  doc,\r\n  updateDoc,\r\n  arrayUnion,\r\n} from \"firebase/firestore\";\r\nimport { useUserContext } from \"../../context/userContext\";\r\nimport { db } from \"../../firebase-config\";\r\nexport const Topic = () => {\r\n  const { topicId } = useParams();\r\n  const { currentUser } = useUserContext();\r\n  const [ posts, setPosts ] = useState( [] );\r\n  const [ formState, setFormState ] = useState( \"\" );\r\n  const [ topic, setTopic ] = useState( {} );\r\n\r\n  useEffect( () => {\r\n    async function getTopic() {\r\n      try {\r\n        const q = query(\r\n          collection( db, \"topics\" ),\r\n          where( \"topicId\", \"==\", topicId )\r\n        );\r\n\r\n        const querySnapshot = await getDocs( q );\r\n        const [ topic ] = querySnapshot.docs.map( ( post ) => post.data() );\r\n        console.log( \"Des\" + topic.topicDescription );\r\n        if ( topic.likeId != null )\r\n          topic.likeIdCount = Object.keys( topic.likeId ).length;\r\n        else topic.likeIdCount = 0;\r\n        if ( topic.dislikeId != null )\r\n          topic.dislikeIdCount = Object.keys( topic.dislikeId ).length;\r\n        else topic.dislikeIdCount = 0;\r\n        if ( topic.haspinned == null )\r\n          topic.haspinned = false;\r\n        setTopic( topic );\r\n      } catch ( err ) {\r\n        console.log( err );\r\n      }\r\n    }\r\n    getTopic();\r\n  }, [] );\r\n\r\n  useEffect( () => {\r\n    async function getPosts() {\r\n      try {\r\n        const q = query(\r\n          collection( db, \"posts\" ),\r\n          where( \"topicId\", \"==\", topicId )\r\n        );\r\n        console.log( \"getPosts\" );\r\n        const unsub = await onSnapshot( q, ( querySnapshot ) => {\r\n          const posts = querySnapshot.docs\r\n            .map( ( post ) => post.data() )\r\n            //.sort( ( a, b ) => ( b.createdAt - a.createdAt ) );\r\n            .sort( function ( a, b ) {\r\n\r\n              var ap, bp;\r\n              if ( a.likeId != null ) ap = Object.keys( a.likeId ).length;\r\n              if ( b.likeId != null ) bp = Object.keys( b.likeId ).length;\r\n              return b.pinned - a.pinned || bp - ap || b.createdAt - a.createdAt;\r\n            } );\r\n          {\r\n            posts.map( ( post, index ) => {\r\n              //            console.log(post.createdAt + (post.pinned == true ? 1000000000000: 0 ));\r\n              if ( post.likeId != null )\r\n                post.likeIdCount = Object.keys( post.likeId ).length;\r\n              else post.likeIdCount = 0;\r\n              if ( post.dislikeId != null )\r\n                post.dislikeIdCount = Object.keys( post.dislikeId ).length;\r\n              else post.dislikeIdCount = 0;\r\n            } )\r\n          }\r\n          setPosts( posts );\r\n\r\n        } );\r\n\r\n        return unsub;\r\n      } catch ( err ) {\r\n        console.log( err );\r\n      }\r\n    }\r\n    return getPosts();\r\n  }, [] );\r\n\r\n  const handleLikeClick = async ( ev, parent ) => {\r\n    ev.preventDefault();\r\n    if ( currentUser.role != \"teacher\" ) return;\r\n    //       if(parent)\r\n    console.log( currentUser.role );\r\n    if ( parent.likeId.includes( currentUser.uid ) == false &&\r\n      parent.dislikeId.includes( currentUser.uid ) == false ) {\r\n      var parentDoc;\r\n      if ( parent === topic )\r\n        parentDoc = doc( db, \"topics\", parent.topicId );\r\n      else parentDoc = doc( db, \"posts\", parent.postId );\r\n      await updateDoc( parentDoc, {\r\n        likeId: arrayUnion( currentUser.uid ),\r\n      } )\r\n      parent.likeIdCount++;\r\n      parent.likeId.push( currentUser.uid );\r\n      //setTopic(arr=>[...topics]);\r\n    }\r\n  }\r\n\r\n  const handledisLikeClick = async ( ev, parent ) => {\r\n    ev.preventDefault();\r\n    console.log( currentUser.role );\r\n    if ( parent.likeId.includes( currentUser.uid ) == false &&\r\n      parent.dislikeId.includes( currentUser.uid ) == false ) {\r\n      var parentDoc;\r\n      if ( parent === topic )\r\n        parentDoc = doc( db, \"topics\", parent.topicId );\r\n      else parentDoc = doc( db, \"posts\", parent.postId );\r\n      await updateDoc( parentDoc, {\r\n        dislikeId: arrayUnion( currentUser.uid ),\r\n      } );\r\n      parent.dislikeIdCount++;\r\n      parent.dislikeId.push( currentUser.uid );\r\n      //setTopic(arr=>[...topics]);\r\n    }\r\n  }\r\n  const handlePin = async ( ev, post ) => {\r\n    console.log( \"BBBBB\" );\r\n    const postDoc = doc( db, \"posts\", post.postId );\r\n    await updateDoc( postDoc,\r\n      {\r\n        pinned: true,\r\n      } );\r\n    post.pinned = true;\r\n    const topicDoc = doc( db, \"topics\", topic.topicId );\r\n    await updateDoc( topicDoc, {\r\n      haspinned: true,\r\n    } );\r\n    topic.haspinned = true;\r\n    setTopic( topic );\r\n    setPosts( arr => [ ...posts ] );\r\n\r\n  }\r\n  const handleUnPin = async ( ev, post ) => {\r\n    console.log( \"BBBBB\" );\r\n    const postDoc = doc( db, \"posts\", post.postId );\r\n    await updateDoc( postDoc,\r\n      {\r\n        pinned: false,\r\n      } );\r\n    post.pinned = false;\r\n    const topicDoc = doc( db, \"topics\", topic.topicId );\r\n    await updateDoc( topicDoc, {\r\n      haspinned: false,\r\n    } );\r\n    topic.haspinned = false;\r\n    setTopic( topic );\r\n    setPosts( arr => [ ...posts ] );\r\n\r\n  }\r\n\r\n  const handleDeletePost = async (ev,post) => {\r\n    const postDoc = doc( db, \"posts\", post.postId );\r\n    setPosts( arr => [ ...posts ] );\r\n    const topicDoc = doc( db, \"topics\", topic.topicId );\r\n    if(post.pinned == true)\r\n    {\r\n     \r\n      await updateDoc( topicDoc, {\r\n        haspinned: false,\r\n      } );\r\n      topic.haspinned = false;\r\n    }\r\n    await updateDoc( topicDoc, {\r\n      comment: topic.comment-1,\r\n    } );\r\n    setTopic( topic );    \r\n    deleteDoc(postDoc);\r\n  }\r\n  const checkIsTeacher = () => {\r\n    if ( currentUser.role == \"teacher\" ) return true;\r\n    else return false;\r\n  }\r\n  const setIconColor = ( likeId, uId ) => {\r\n    if ( likeId != null && likeId.includes( uId ) == true )\r\n      return \"green\";\r\n    return \"black\";\r\n  }\r\n\r\n  const setUserIconColor = ( user ) => {\r\n    if ( currentUser.displayname == user )\r\n      return \"red\";\r\n    return \"black\";\r\n  }\r\n  const handlePostModal = async () => {\r\n    console.log( \"AAhahahaA\" );\r\n  }\r\n  return (\r\n    <Sidebar >\r\n      {/* <Card style={{ width: \"100%\" }}>\r\n        <Card.Content style={{ width: \"100% !important\" }}>\r\n          <Card.Header>{topic.topicTitle}</Card.Header>\r\n          <Card.Meta>{topic.topicSubject}</Card.Meta>\r\n          <Image src={topic.topicImage} size=\"huge\" />\r\n          <Card.Description>{topic.topicDescription}</Card.Description>\r\n          <Label>{topic.user}</Label>\r\n        </Card.Content>\r\n        \r\n      </Card> */}\r\n      <Card\r\n        style={ { width: \"99%\" } }\r\n        header={<h1 >\r\n        {topic.topicTitle}\r\n        </h1>  }\r\n        meta={ topic.topicSubject }\r\n        description={ topic.topicDescription }\r\n        extra={\r\n          <div >\r\n            {topic.topicImage!=null && <Image src={ topic.topicImage } size=\"medium\" />}\r\n            <h4>\r\n              <Icon color={ setUserIconColor( topic.user ) } name=\"user\" />\r\n              { topic.user }\r\n            </h4>\r\n            { <div>\r\n              <Button onClick={ ( e ) => handleLikeClick( e, topic ) }>\r\n                <Icon color={ setIconColor( topic.likeId, currentUser.uid ) } name='thumbs up' />\r\n                { topic.likeIdCount }\r\n              </Button>\r\n              <Button onClick={ ( e ) => handledisLikeClick( e, topic ) }>\r\n                <Icon color={ setIconColor( topic.dislikeId, currentUser.uid ) } name='thumbs down' />\r\n                { topic.dislikeIdCount }\r\n              </Button>\r\n              {/* <Button disabled>\r\n                        <Icon color={setIconColor(topic.likeId,currentUser.uid)} name='comment' />\r\n                        {topic.comment}\r\n                        </Button> */}\r\n            </div> }\r\n\r\n          </div>\r\n        }\r\n      />\r\n\r\n      <PostModal topicId={ topicId } curComment={ topic.comment } onShow={ handlePostModal() } />\r\n      <Divider\r\n        as='h4'\r\n        className='header'\r\n        horizontal\r\n        style={ { margin: '5em 0em', textTransform: 'uppercase' } }\r\n      >\r\n        <a >Answers</a>\r\n      </Divider>\r\n\r\n      <Container >\r\n        { posts.map( ( post ) => (\r\n          <Card\r\n\r\n            style={ { width: \"100%\", margin: '0em 0em 0em 0em', backgroundColor: post.pinned == true ? 'HoneyDew' : 'white' } }\r\n            className=\"e-card-horizontal\"\r\n            header={ <>\r\n              <h3>\r\n                <Icon color={ setUserIconColor( post.user ) } name=\"user\" />\r\n                { post.user }\r\n                { checkIsTeacher() == true &&\r\n                  ( <Button icon='delete' size='tiny' style={ { display: 'relative', float: 'right'} } onClick={ ( e ) => handleDeletePost( e, post ) }/>\r\n                  )\r\n                }\r\n              </h3>\r\n            </>\r\n            }\r\n            description={ <>\r\n              <Container>{ post.postTitle }</Container>\r\n              <Rail close position='right'>\r\n                <Button.Group vertical>\r\n                  <Button onClick={ ( e ) => handleLikeClick( e, post ) } >\r\n                    <Icon color={ setIconColor( post.likeId, currentUser.uid ) } name='thumbs up' />\r\n                    { post.likeIdCount }\r\n                  </Button>\r\n                  <div>---</div>\r\n                  <Button onClick={ ( e ) => handledisLikeClick( e, post ) }>\r\n                    <Icon color={ setIconColor( post.dislikeId, currentUser.uid ) } name='thumbs down' />\r\n                    { post.dislikeIdCount }\r\n                  </Button>\r\n\r\n                </Button.Group>\r\n              </Rail>\r\n\r\n              <Image src={ post.postImage } size=\"small\" />\r\n\r\n            </> }\r\n            extra={\r\n              <div >\r\n                { checkIsTeacher() == true && topic.haspinned == false &&\r\n                  ( <Button icon='check circle' style={ { display: 'flex', float: 'right' } } onClick={ ( e ) => handlePin( e, post ) }>\r\n                  </Button> )\r\n                }\r\n                \r\n                { checkIsTeacher() == true && post.pinned == true &&\r\n                  ( <Button icon='undo' style={ { display: 'flex', float: 'right' } } onClick={ ( e ) => handleUnPin( e, post ) }>\r\n                  </Button> )\r\n                }\r\n              </div>\r\n\r\n            }\r\n          />\r\n        ) ) }\r\n\r\n      </Container>\r\n\r\n    </Sidebar>\r\n  );\r\n};\r\n","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\User\\Profile.js",["156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  Header,\r\n  Image,\r\n  Loader,\r\n  Dimmer,\r\n  Message,\r\n  Segment,\r\n  Check,\r\n  Checkbox,\r\n  Icon,\r\n  Container,\r\n} from \"semantic-ui-react\";\r\nimport { Sidebar } from \"../Dashboard/Sidebar\";\r\nimport AgoraLogo from \"../../images/logo.png\";\r\nimport { useUserContext } from \"../../context/userContext\";\r\nimport { updateEmail, updatePassword } from \"firebase/auth\";\r\nimport { auth } from \"../../firebase-config\";\r\nimport { ref, getDownloadURL, uploadBytesResumable } from \"firebase/storage\";\r\nimport { updateDoc, doc } from \"firebase/firestore\";\r\nimport { db, storage } from \"../../firebase-config\";\r\nexport const Profile = () => {\r\n  const initialState = {\r\n    userName: \"\",\r\n    email: \"\",\r\n    address: \"\",\r\n    birthdate: \"\",\r\n    phoneNumber: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    role: \"student\",\r\n    avatarUrl: \"https://react.semantic-ui.com/images/wireframe/image.png\",\r\n    avatar: null,\r\n  };\r\n  const initalChangeState = {\r\n    userName: false,\r\n    email: false,\r\n    address: false,\r\n    birthdate: false,\r\n    phoneNumber: false,\r\n    password: false,\r\n    confirmPassword: false,\r\n    role: false,\r\n    avatarUrl: false,\r\n    avatar: false,\r\n  };\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [formState, setFormState] = useState(initialState);\r\n  const [formChangeState, setChangeState] = useState(initalChangeState);\r\n  const [isUpdateInProgress, setUpdateInProgress] = useState(false);\r\n  const { updateUserPassword, currentUser } = useUserContext();\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n  const [passAndConfirmPass, setPassAndConfirmPass] = useState(true);\r\n  const [passValid, setPassValid] = useState(true);\r\n  useEffect(() => {\r\n    const getProfile = async () => {\r\n      try {\r\n        setFormState((prev) => ({\r\n          ...prev,\r\n          role: currentUser.role,\r\n          email: currentUser.email,\r\n          phoneNumber: currentUser.phone,\r\n          address: currentUser.address,\r\n          birthdate: currentUser.birthdate,\r\n          avatarUrl:\r\n            currentUser.avatar == undefined\r\n              ? \"/images/uicon.png\"\r\n              : currentUser.avatar,\r\n          userName: currentUser.uname,\r\n        }));\r\n        console.log(formState);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    getProfile();\r\n    //console.log(currentUser.role);\r\n  }, []);\r\n  const handleUpdate = async () => {\r\n    console.log(formState);\r\n    console.log(formChangeState);\r\n    console.log(formState.isTeacher);\r\n\r\n    // if (\r\n    //   formState.userName == \"\"||\r\n    //   formState.email === \"\" ||\r\n    //   formState.phoneNumber == \"\"||\r\n    //   formState.password === \"\" ||\r\n    //   formState.confirmPassword === \"\" ||\r\n    //   formState.avatar === null\r\n    // )\r\n    // {\r\n    //     return;\r\n    // }\r\n    if (formState.confirmPassword !== formState.password) {\r\n      setPassAndConfirmPass(false);\r\n      return;\r\n    }\r\n\r\n    // if (\r\n    //   !formState.password.match(\r\n    //     /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/g\r\n    //   )\r\n    // ) {\r\n    //   setPassValid(false);\r\n    //   return;\r\n    // }\r\n\r\n    try {\r\n      setUpdateInProgress(true);\r\n      //if(formChangeState.email == true)\r\n      //const { user } = await updateUserPassword(formState.password);\r\n      if (formChangeState.avatar) {\r\n        const storageRef = ref(storage, `images/${formState.topicSubject}`);\r\n        const uploadTask = uploadBytesResumable(storageRef, formState.avatar);\r\n\r\n        // Listen for state changes, errors, and completion of the upload.\r\n        uploadTask.on(\r\n          \"state_changed\",\r\n          (snapshot) => {\r\n            // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\r\n            const progress =\r\n              (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n            console.log(\"Upload is \" + progress + \"% done\");\r\n            switch (snapshot.state) {\r\n              case \"paused\":\r\n                console.log(\"Upload is paused\");\r\n                break;\r\n              case \"running\":\r\n                console.log(\"Upload is running\");\r\n                break;\r\n            }\r\n          },\r\n          (error) => {\r\n            // A full list of error codes is available at\r\n            // https://firebase.google.com/docs/storage/web/handle-errors\r\n            switch (error.code) {\r\n              case \"storage/unauthorized\":\r\n                // User doesn't have permission to access the object\r\n                break;\r\n              case \"storage/canceled\":\r\n                // User canceled the upload\r\n                break;\r\n\r\n              // ...\r\n\r\n              case \"storage/unknown\":\r\n                // Unknown error occurred, inspect error.serverResponse\r\n                break;\r\n            }\r\n          },\r\n          () => {\r\n            // Upload completed successfully, now we can get the download URL\r\n            getDownloadURL(uploadTask.snapshot.ref).then(\r\n              async (downloadURL) => {\r\n                const userCollDoc = doc(db, \"users\", currentUser.uid);\r\n                await updateDoc(userCollDoc, {\r\n                  avatar: downloadURL,\r\n                });\r\n                setLoading(false);\r\n                setUpdateInProgress(false);\r\n              }\r\n            );\r\n          }\r\n        );\r\n      }\r\n      console.log(currentUser.uid);\r\n      const userDoc = doc(db, \"users\", currentUser.uid);\r\n      await updateDoc(userDoc, {\r\n        address: formState.address,\r\n        phone: formState.phoneNumber,\r\n        birthdate: formState.birthdate,\r\n      });\r\n      setIsSuccess(true);\r\n      setLoading(false);\r\n      setUpdateInProgress(false);\r\n    } catch (err) {\r\n      console.log(err);\r\n      setIsSuccess(false);\r\n      setUpdateInProgress(false);\r\n    }\r\n  };\r\n  const handleImageChange = (ev) => {\r\n    console.log(\"AA\" + URL.createObjectURL(ev.target.files[0]));\r\n    setFormState((prev) => ({\r\n      ...prev,\r\n      avatarUrl: URL.createObjectURL(ev.target.files[0]),\r\n      [ev.target.id]: ev.target.files[0],\r\n    }));\r\n    setChangeState((prev) => ({ ...prev, avatarUrl: true, avatar: true }));\r\n  };\r\n  const handleChange = (ev) => {\r\n    setFormState((prev) => ({ ...prev, [ev.target.id]: ev.target.value }));\r\n    setChangeState((prev) => ({ ...prev, [ev.target.id]: true }));\r\n  };\r\n  const handleChangeTeacher = (ev) => {\r\n    setFormState((prev) => ({\r\n      ...prev,\r\n      [ev.target.id]: ev.target.checked == 0 ? \"student\" : \"teacher\",\r\n    }));\r\n  };\r\n  return (\r\n    <Sidebar>\r\n      {loading && (\r\n        <Dimmer active>\r\n          <Loader size=\"mini\">Submitting your question....</Loader>\r\n        </Dimmer>\r\n      )}\r\n      <Form size=\"large\" onSubmit={handleUpdate}>\r\n        <Segment stacked>\r\n          <Form.Input\r\n            label={\r\n              <Image\r\n                label=\"Profile Image\"\r\n                src={formState.avatarUrl}\r\n                size=\"medium\"\r\n              />\r\n            }\r\n            placeholder=\"\"\r\n            onChange={handleImageChange}\r\n            type=\"file\"\r\n            id=\"avatar\"\r\n            size=\"small\"\r\n          />\r\n\r\n          <Form.Input\r\n            fluid\r\n            label=\"UserName\"\r\n            icon=\"user\"\r\n            iconPosition=\"left\"\r\n            id=\"userName\"\r\n            onChange={handleChange}\r\n            defaultValue={formState.userName}\r\n          />\r\n          <Form.Group widths=\"equal\">\r\n            <Form.Input\r\n              fluid\r\n              label=\"Email Address\"\r\n              icon=\"mail\"\r\n              iconPosition=\"left\"\r\n              id=\"email\"\r\n              onChange={handleChange}\r\n              defaultValue={formState.email}\r\n            />\r\n            <Form.Input\r\n              fluid\r\n              label=\"Phone Number\"\r\n              icon=\"phone\"\r\n              iconPosition=\"left\"\r\n              type=\"tel\"\r\n              onChange={handleChange}\r\n              id=\"phoneNumber\"\r\n              defaultValue={formState.phoneNumber}\r\n              onKeyPress={(event) => {\r\n                //if (!/[0-9]/.test(event.key)) {\r\n                //  event.preventDefault();\r\n                //}\r\n              }}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group widths=\"equal\">\r\n            <Form.Input\r\n              fluid\r\n              label=\"Address\"\r\n              icon=\"address card\"\r\n              iconPosition=\"left\"\r\n              id=\"address\"\r\n              type=\"address\"\r\n              defaultValue={formState.address}\r\n              onChange={handleChange}\r\n            />\r\n            <Form.Input\r\n              fluid\r\n              label=\"DOB\"\r\n              icon=\"calendar\"\r\n              iconPosition=\"left\"\r\n              id=\"birthdate\"\r\n              type=\"date\"\r\n              defaultValue={formState.birthdate}\r\n              onChange={handleChange}\r\n            />\r\n          </Form.Group>\r\n          {/* <Form.Input\r\n            fluid\r\n            label=\"Old Password\"\r\n            icon=\"lock\"\r\n            iconPosition=\"left\"\r\n            placeholder=\"Password\"\r\n            onChange={handleChange}\r\n            type=\"password\"\r\n            id=\"oldPassword\"\r\n          /> */}\r\n          {/* <Form.Input\r\n            fluid\r\n            label=\"New Password\"\r\n            icon=\"lock\"\r\n            iconPosition=\"left\"\r\n            placeholder=\"Password\"\r\n            onChange={ handleChange }\r\n            type=\"password\"\r\n            id=\"password\"\r\n          />\r\n          <Form.Input\r\n            fluid\r\n            label=\"Confirm New Password\"\r\n            icon=\"lock\"\r\n            iconPosition=\"left\"\r\n            placeholder=\"Confirm Password\"\r\n            onChange={ handleChange }\r\n            type=\"password\"\r\n            id=\"confirmPassword\"\r\n          />\r\n          <h1 style={{textTransform :'uppercase'}}>{currentUser.role}</h1> */}\r\n          <Button color=\"teal\" fluid size=\"large\" type=\"submit\">\r\n            {isUpdateInProgress ? (\r\n              <Dimmer active>\r\n                <Loader size=\"mini\">Loading</Loader>\r\n              </Dimmer>\r\n            ) : (\r\n              \"Update\"\r\n            )}\r\n          </Button>\r\n        </Segment>\r\n      </Form>\r\n    </Sidebar>\r\n  );\r\n};\r\n","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\History\\History.js",["177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192"],"import React, { useState ,useEffect} from \"react\";\r\nimport { Icon, Label, Menu, Table } from 'semantic-ui-react'\r\nimport { Link } from \"react-router-dom\";\r\nimport { useUserContext } from \"../../context/userContext\";\r\nimport { db,storage} from \"../../firebase-config\";\r\nimport { query,where,collection, addDoc ,doc,setDoc,serverTimestamp, arrayRemove, updateDoc,arrayUnion, getDoc, getDocs} from \"firebase/firestore\";\r\nimport { Sidebar } from \"../Dashboard/Sidebar\";\r\nexport const History = () =>\r\n{\r\n    const [historys, setHistory] = useState();//histories\r\n    const { currentUser } = useUserContext();\r\n    useEffect(() => {\r\n        async function getHistory() {\r\n            console.log(currentUser.uid);\r\n          try {\r\n              \r\n                const q = query(\r\n                    collection(db, \"users\"),\r\n                    where(\"uid\", \"==\", currentUser.uid)\r\n                );\r\n                const querySnapshot = await getDocs(q);\r\n                const [historys] = querySnapshot.docs.map((post) => post.data());\r\n\r\n                setHistory(historys.history);\r\n          } catch (err) {\r\n            console.log(err);\r\n          }\r\n        }\r\n        return getHistory();\r\n      }, []);\r\n    const splithistory = (history) => {\r\n        const data = history.split(\"^\");\r\n\r\n        return(\r\n            \r\n            <Table.Row>\r\n            <Table.Cell>{data[0]}</Table.Cell>\r\n            <Table.Cell>{data[1]}</Table.Cell>\r\n            <Table.Cell>{data[2]}</Table.Cell>\r\n            <Table.Cell ><div dangerouslySetInnerHTML={{__html: data[3]}}></div></Table.Cell>\r\n            \r\n            </Table.Row>\r\n            // <div>\r\n            //     {history}\r\n            // </div>\r\n        )\r\n    }\r\n    return(\r\n        //dangerouslySetInnerHTML={{__html: data[3]}}\r\n        <Sidebar>\r\n            <Table color=\"GhostWhite\" key=\"GhostWhite\">\r\n                <Table.Header >\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Action</Table.HeaderCell>\r\n                        <Table.HeaderCell>Type</Table.HeaderCell>\r\n                        <Table.HeaderCell>Time</Table.HeaderCell>\r\n                        <Table.HeaderCell>Description</Table.HeaderCell> \r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                   {historys!=undefined && historys.length!=0 && historys.map((history) =>(\r\n                   splithistory(history)\r\n                    ))}\r\n\r\n                </Table.Body>\r\n            </Table>\r\n        </Sidebar>\r\n    )   \r\n}","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Quizzes\\Quiz.js",["193","194","195"],"import { useUserContext } from \"../../context/userContext\";\r\nimport { db } from \"../../firebase-config\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { collection, query, getDocs, where,doc,updateDoc,arrayUnion} from \"firebase/firestore\";\r\nimport { Sidebar } from \"../Dashboard/Sidebar\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Menu,Button, Card, Image, Form, Radio, Message } from \"semantic-ui-react\";\r\nimport QuizModal from \"../Dashboard/QuizModal\";\r\n\r\nexport const Quiz = () => {\r\n  const { subject } = useParams();\r\n  const { currentUser } = useUserContext();\r\n  const isNotStudentRole = currentUser.role !== \"student\";\r\n  const [formState, setFormState] = useState([]);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  console.log(formState);\r\n\r\n  const [subjectQuizzes, setSubjectQuizzes] = useState([]);\r\n  useEffect(() => {\r\n    async function getSubjects() {\r\n      const q = query(\r\n        collection(db, \"quizzes\"),\r\n        where(\"subject\", \"==\", subject)\r\n      );\r\n\r\n      const querySnapshot = await getDocs(q);\r\n      const quizzes = querySnapshot.docs.map((doc) => doc.data());\r\n\r\n      setSubjectQuizzes(quizzes);\r\n    }\r\n    getSubjects();\r\n  }, []);\r\n  const handleChange = (e,{value}) => {\r\n//    console.log(name);\r\n    console.log(value +\"A\" + e.target.outerText);\r\n    formState[value]=e.target.outerText;\r\n    console.log(formState);\r\n    setFormState(arr=>[...formState]);\r\n  };\r\n\r\n  const handleScore = (ev) => {\r\n    ev.preventDefault();\r\n    console.log(subjectQuizzes);\r\n    const score = subjectQuizzes.filter(\r\n      (quiz,index) => formState[index] === quiz.correctAnswer\r\n    ).length;\r\n    setScore(score);\r\n    setSubmitted(true);\r\n    console.log(score);\r\n    const userDoc = doc(db, \"users\", currentUser.uid);\r\n    const current = new Date();\r\n    const curdate = `${current.getDate()}/${current.getMonth()+1}/${current.getFullYear()} ${current.getHours()}:${current.getMinutes()}:${current.getSeconds()}`;\r\n    updateDoc(userDoc,\r\n      {\r\n        history: arrayUnion(\"Quiz^Test^\"+curdate+\"^\"+\"Score:\"+score+\"/\"+Object.keys(subjectQuizzes).length),\r\n      });\r\n  };\r\n  const options = [{ key: \"1\", text: subject, value: subject }];\r\n  if (subjectQuizzes.length === 0) {\r\n    return (\r\n      <Sidebar>\r\n        <h1>Subject: {subject}</h1>\r\n\r\n        {submitted && (\r\n          <Message\r\n            success\r\n            header=\"Your current score is\"\r\n            content={`${score}/${subjectQuizzes.length}`}\r\n          />\r\n        )}\r\n\r\n        <Menu style={{ padding: \"20px 0\" }}>\r\n          {isNotStudentRole && (\r\n            <QuizModal subjectOptions={options} currentUser={currentUser} />\r\n          )}\r\n        </Menu>\r\n\r\n        <Message>\r\n          <Message.Header>No quizzes found</Message.Header>\r\n          <p>Currently no quizzes is available for this particular subject</p>\r\n        </Message>\r\n      </Sidebar>\r\n    );\r\n  }\r\n  return (\r\n    <Sidebar>\r\n      <h1>Quiz - {subject}</h1>\r\n\r\n      {submitted && (\r\n        <Message\r\n          success\r\n          header=\"Your current score is\"\r\n          content={`${score}/${subjectQuizzes.length}`}\r\n        />\r\n      )}\r\n\r\n      <Menu style={{ padding: \"20px 0\" }}>\r\n        {isNotStudentRole && (\r\n          <QuizModal subjectOptions={options} currentUser={currentUser} />\r\n        )}\r\n      </Menu>\r\n\r\n        {subjectQuizzes.map((quiz, index) => {\r\n          return (\r\n            \r\n            <Card style={{ width: \"100%\" }} key={quiz.quizId}>\r\n              <Card.Content>\r\n                <Card.Header>{quiz.question}</Card.Header>\r\n                <Card.Description></Card.Description>\r\n              </Card.Content>\r\n              <Card.Content extra>\r\n              <Form >\r\n                <Form.Field>\r\n                  <Radio\r\n                    label={quiz.answer1}\r\n                    name={index}\r\n                    value={index}\r\n                    onChange={handleChange}\r\n                    checked={formState[index] === quiz.answer1}\r\n                  />\r\n                </Form.Field>\r\n                <Form.Field>\r\n                  <Radio\r\n                      label={quiz.answer2}\r\n                      name={index}\r\n                      value={index}\r\n                      onChange={handleChange}\r\n                      checked={formState[index] === quiz.answer2}\r\n                    />\r\n\r\n                </Form.Field>\r\n                <Form.Field>\r\n                  <Radio\r\n                    label={quiz.answer3}\r\n                    name={index}\r\n                    value={index}\r\n                    onChange={handleChange}\r\n                    checked={formState[index] === quiz.answer3}\r\n                  />\r\n                </Form.Field>\r\n                <Form.Field>\r\n                  <Radio\r\n                    label={quiz.answer4}\r\n                    name={index}\r\n                    value={index}\r\n                    onChange={handleChange}\r\n                    checked={formState[index] === quiz.answer4}\r\n                  />\r\n                </Form.Field>\r\n            </Form>\r\n              </Card.Content>\r\n            </Card>\r\n\r\n          );\r\n        })}\r\n        <Button color=\"violet\" onClick={handleScore}>\r\n          Submit\r\n        </Button>\r\n    </Sidebar>\r\n  );\r\n};\r\n","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\firebase-config.js",[],"E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Dashboard\\QuestionModal.js",["196","197","198","199","200","201","202","203","204","205"],"//import { ArrayBuffer } from \"firebase/firestore-types\";\r\nimport {\r\n  doc,\r\n  getDoc,\r\n  serverTimestamp,\r\n  arrayRemove,\r\n  setDoc,\r\n  updateDoc,\r\n  arrayUnion,\r\n} from \"firebase/firestore\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Header,\r\n  Modal,\r\n  Select,\r\n  Form,\r\n  Dimmer,\r\n  Input,\r\n  TextArea,\r\n  Loader,\r\n  MenuItem,\r\n  Menu,\r\n} from \"semantic-ui-react\";\r\nimport { collection, query, where, getDocs, addDoc } from \"firebase/firestore\";\r\nimport { db, storage } from \"../../firebase-config\";\r\nimport { useUserContext } from \"../../context/userContext\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { ref, getDownloadURL, uploadBytesResumable } from \"firebase/storage\";\r\nconst initialState = {\r\n  topicTitle: \"\",\r\n  topicSubject: \"\",\r\n  topicDescription: \"\",\r\n};\r\nexport function QuestionModal({ subjectOptions }) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const { currentUser } = useUserContext();\r\n\r\n  const [formState, setFormState] = useState(initialState);\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n\r\n  const handleChange = (ev) => {\r\n    setFormState((prev) => ({ ...prev, [ev.target.id]: ev.target.value }));\r\n  };\r\n\r\n  const handleTopicSubmit = async (ev) => {\r\n    ev.preventDefault();\r\n    try {\r\n      if (\r\n        formState.topicDescription === \"\" ||\r\n        formState.topicSubject === \"\" ||\r\n        formState.topicTitle === \"\"\r\n      ) {\r\n        return;\r\n      }\r\n      setLoading(true);\r\n      console.log(selectedFile);\r\n      var topId = uuidv4();\r\n\r\n      if (selectedFile) {\r\n        const storageRef = ref(storage, `images/${formState.topicSubject}`);\r\n        const uploadTask = uploadBytesResumable(storageRef, selectedFile);\r\n\r\n        // Listen for state changes, errors, and completion of the upload.\r\n        uploadTask.on(\r\n          \"state_changed\",\r\n          (snapshot) => {\r\n            // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\r\n            const progress =\r\n              (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n            console.log(\"Upload is \" + progress + \"% done\");\r\n            switch (snapshot.state) {\r\n              case \"paused\":\r\n                console.log(\"Upload is paused\");\r\n                break;\r\n              case \"running\":\r\n                console.log(\"Upload is running\");\r\n                break;\r\n            }\r\n          },\r\n          (error) => {\r\n            // A full list of error codes is available at\r\n            // https://firebase.google.com/docs/storage/web/handle-errors\r\n            switch (error.code) {\r\n              case \"storage/unauthorized\":\r\n                // User doesn't have permission to access the object\r\n                break;\r\n              case \"storage/canceled\":\r\n                // User canceled the upload\r\n                break;\r\n\r\n              // ...\r\n\r\n              case \"storage/unknown\":\r\n                // Unknown error occurred, inspect error.serverResponse\r\n                break;\r\n            }\r\n          },\r\n          () => {\r\n            // Upload completed successfully, now we can get the download URL\r\n            getDownloadURL(uploadTask.snapshot.ref).then(\r\n              async (downloadURL) => {\r\n                const topicCollDoc = doc(db, \"topics\", topId);\r\n                await setDoc(topicCollDoc, {\r\n                  ...formState,\r\n                  user: currentUser.displayname,\r\n                  topicId: topId,\r\n                  topicImage: downloadURL,\r\n                  createdAt: serverTimestamp(),\r\n                  likeId: arrayRemove(\"\"),\r\n                  dislikeId: arrayRemove(\"\"),\r\n                  comment: 0,\r\n                  topicDescription: formState.topicDescription,\r\n                  haspinned: false,\r\n                });\r\n                setOpen(false);\r\n                setFormState(initialState);\r\n                setLoading(false);\r\n              }\r\n            );\r\n          }\r\n        );\r\n      } else {\r\n        const topicCollRef = collection(db, \"topics\");\r\n        const topicDoc = doc(db, \"topics\", topId);\r\n        await setDoc(topicDoc, {\r\n          ...formState,\r\n          user: currentUser.displayname,\r\n          topicId: topId,\r\n          createdAt: serverTimestamp(),\r\n          likeId: arrayRemove(\"\"),\r\n          dislikeId: arrayRemove(\"\"),\r\n          comment: 0,\r\n          topicDescription: formState.topicDescription,\r\n          haspinned: false,\r\n        });\r\n        setOpen(false);\r\n        setFormState(initialState);\r\n        setLoading(false);\r\n      }\r\n      const userDoc = doc(db, \"users\", currentUser.uid);\r\n      const current = new Date();\r\n      const curdate = `${current.getDate()}/${\r\n        current.getMonth() + 1\r\n      }/${current.getFullYear()} ${current.getHours()}:${current.getMinutes()}:${current.getSeconds()}`;\r\n      updateDoc(userDoc, {\r\n        history: arrayUnion(\r\n          \"Topic^Create^\" +\r\n            curdate +\r\n            \"^\" +\r\n            \"<a href ='/topic/\" +\r\n            topId +\r\n            \"' >\" +\r\n            formState.topicTitle +\r\n            \"</a>\"\r\n        ),\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      onClose={() => setOpen(false)}\r\n      onOpen={() => setOpen(true)}\r\n      open={open}\r\n      trigger={<Menu.Item>Create a Discussion Topic</Menu.Item>}\r\n    >\r\n      {loading && (\r\n        <Dimmer active>\r\n          <Loader size=\"mini\">Submitting your question....</Loader>\r\n        </Dimmer>\r\n      )}\r\n      <Modal.Header>Topic</Modal.Header>\r\n      <Modal.Content>\r\n        <Modal.Description>\r\n          <Header>Add a Discussion Topic</Header>\r\n          <Form onSubmit={handleTopicSubmit}>\r\n            <Form.Group>\r\n              <Form.Field\r\n                control={Input}\r\n                label=\"Topic title\"\r\n                placeholder=\"Add a topic\"\r\n                id=\"topicTitle\"\r\n                value={formState.topicTitle}\r\n                onChange={handleChange}\r\n              />\r\n            </Form.Group>\r\n            <Form.Field\r\n              control={Select}\r\n              label=\"Topic Subject\"\r\n              options={subjectOptions}\r\n              placeholder=\"Subject\"\r\n              id=\"topicSubject\"\r\n              onChange={(ev, data) => {\r\n                setFormState((prev) => ({ ...prev, topicSubject: data.value }));\r\n              }}\r\n              value={formState.topicSubject}\r\n            />\r\n            <Form.Field\r\n              control={TextArea}\r\n              label=\"Topic Description\"\r\n              id=\"topicDescription\"\r\n              placeholder=\"Add a topic description\"\r\n              onChange={handleChange}\r\n              value={formState.topicDescription}\r\n            />\r\n            \r\n            <input\r\n              type=\"file\"\r\n              label=\"Image\"\r\n              onChange={(ev) => setSelectedFile(ev.target.files[0])}\r\n            />\r\n            <Form.Field control={Button}>Submit</Form.Field>\r\n          </Form>\r\n        </Modal.Description>\r\n      </Modal.Content>\r\n    </Modal>\r\n  );\r\n}\r\n","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Dashboard\\Sidebar.js",["206","207"],"import React from \"react\";\r\nimport {\r\n  Icon,\r\n  Menu,\r\n  Sidebar as SideBar,\r\n  Container,\r\n  Button,\r\n  Popup,\r\n  Image,\r\n} from \"semantic-ui-react\";\r\nimport UserIcon from \"../../images/elliot.jpg\";\r\nimport { useUserContext } from \"../../context/userContext\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AgoraLogo from \"../../images/logo2.png\";\r\n\r\nexport const Sidebar = ({ children, items }) => {\r\n  const { signOut, currentUser } = useUserContext();\r\n  return (\r\n    <SideBar.Pushable>\r\n      <SideBar\r\n        width=\"thin\"\r\n        size=\"large\"\r\n        as={Menu}\r\n        animation=\"overlay\"\r\n        icon=\"labeled\"\r\n        vertical\r\n        visible={true}\r\n      >\r\n\r\n        <Menu.Item as={Link} to=\"/dashboard\">\r\n          <img src={AgoraLogo} />\r\n        </Menu.Item>\r\n        <Menu.Item as={Link} to=\"/quizzes\">\r\n          <Icon name=\"gamepad\" />\r\n          Quizzes\r\n        </Menu.Item>\r\n        <Menu.Item as={Link} to=\"/history\">\r\n          <Icon name=\"camera\" />\r\n          History\r\n        </Menu.Item>\r\n        <Menu.Item as={Link} to=\"/profile\">\r\n          <Icon name=\"user\" />\r\n          User Profile\r\n        </Menu.Item>\r\n      </SideBar>\r\n      <SideBar.Pusher style={{ minHeight: \"100vh\" }}>\r\n        <Menu\r\n          color=\"teal\"\r\n          backgroundColor=\"teal\"\r\n          inverted\r\n          size=\"massive\"\r\n          borderless\r\n          fixed=\"top\"\r\n        >\r\n          <div\r\n            style={{\r\n              marginLeft: \"auto\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Popup\r\n              header={currentUser.email}\r\n              content={currentUser.role}\r\n              trigger={<Image src={currentUser.avatar} avatar />}\r\n            />\r\n            <Button negative onClick={() => signOut()}>\r\n              Log out\r\n            </Button>\r\n          </div>\r\n        </Menu>\r\n        <Container fluid style={{ paddingLeft: 165, paddingTop: 65 }}>\r\n          {children}\r\n        </Container>\r\n      </SideBar.Pusher>\r\n    </SideBar.Pushable>\r\n  );\r\n};\r\n","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Dashboard\\SubjectModal.js",["208"],"import React, { useState } from \"react\";\r\nimport { Button, Header, Modal, Form, Input, Menu } from \"semantic-ui-react\";\r\nimport { useUserContext } from \"../../context/userContext\";\r\nimport { db } from \"../../firebase-config\";\r\n\r\nimport { collection, addDoc,updateDoc,arrayUnion,doc } from \"firebase/firestore\";\r\n\r\nexport function SubjectModal() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [subject, setSubject] = useState(\"\");\r\n  const [courseId, setCourseId] = useState(\"\");\r\n  const { currentUser } = useUserContext();\r\n  const handleSubject = async (ev) => {\r\n    ev.preventDefault();\r\n    try {\r\n      if (!subject) return;\r\n      const subjectCollRef = collection(db, \"subject\");\r\n      await addDoc(subjectCollRef, {\r\n        title: subject,\r\n        courseId:courseId,\r\n        user: currentUser.uid,\r\n      });\r\n      \r\n      const userDoc = doc(db, \"users\", currentUser.uid);\r\n      const current = new Date();\r\n      const curdate = `${current.getDate()}/${current.getMonth()+1}/${current.getFullYear()} ${current.getHours()}:${current.getMinutes()}:${current.getSeconds()}`;\r\n      updateDoc(userDoc,\r\n        {\r\n          history: arrayUnion(\"Subject^Create^\"+curdate+\"^\"+\"SubjectTitle:\"+subject),\r\n        });\r\n      setOpen(false);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  return (\r\n    <Modal \r\n      onClose={() => setOpen(false)}\r\n      onOpen={() => setOpen(true)}\r\n      open={open}\r\n      trigger={<Menu.Item> Create a Subject</Menu.Item>}\r\n    >\r\n      <Modal.Header>Subject</Modal.Header>\r\n      <Modal.Content>\r\n        <Modal.Description>\r\n          <Header>Add a Subject</Header>\r\n          <Form onSubmit={handleSubject}>\r\n            <Form.Group>\r\n              <Form.Field\r\n                control={Input}\r\n                label=\"Subject Name\"\r\n                placeholder=\"Name of New Subject\"\r\n                onChange={(ev) => setSubject(ev.target.value)}\r\n                value={subject}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Field\r\n                \r\n                  control={Input}\r\n                  label=\"Course Code\"\r\n                  placeholder=\"Course Code\"\r\n                  onChange={(ev) => setCourseId(ev.target.value)}\r\n                  value={courseId}\r\n              />\r\n            </Form.Group>\r\n            <Form.Field control={Button} type=\"submit\">\r\n              Submit\r\n            </Form.Field>\r\n          </Form>\r\n        </Modal.Description>\r\n      </Modal.Content>\r\n    </Modal>\r\n  );\r\n}\r\n","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Dashboard\\QuizModal.js",["209","210","211","212","213","214","215","216"],"import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  Form,\r\n  Input,\r\n  Radio,\r\n  Select,\r\n  Modal,\r\n  TextArea,\r\n  Menu,\r\n} from \"semantic-ui-react\";\r\nimport { collection, query, where, getDocs, addDoc, setDoc,doc,updateDoc,arrayUnion } from \"firebase/firestore\";\r\nimport { db } from \"../../firebase-config\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst QuizModal = ({ subjectOptions, currentUser }) => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [formState, setFormState] = useState({\r\n    answer1: \"\",\r\n    answer2: \"\",\r\n    answer3: \"\",\r\n    answer4: \"\",\r\n    question: \"\",\r\n    subject: \"\",\r\n    correctAnswer: \"\",\r\n  });\r\n\r\n  const handleChange = (ev) => {\r\n    setFormState((prev) => ({ ...prev, [ev.target.id]: ev.target.value }));\r\n  };\r\n\r\n  const handleQuiz = async (ev) => {\r\n    try {\r\n      ev.preventDefault();\r\n      const isEmpty = Object.values(formState).some((val) => val === \"\");\r\n      if (isEmpty) {\r\n        return;\r\n      }\r\n      const quizid = uuidv4();\r\n      const quizzesCollDoc = doc(db, \"quizzes\", quizid);\r\n      await setDoc(quizzesCollDoc, {\r\n        ...formState,\r\n        correctAnswer: formState[formState.correctAnswer],\r\n        user: currentUser.email,\r\n        uid: currentUser.uid,\r\n        quizId: quizid,\r\n      });\r\n      const userDoc = doc(db, \"users\", currentUser.uid);\r\n      const current = new Date();\r\n      const curdate = `${current.getDate()}/${current.getMonth()+1}/${current.getFullYear()} ${current.getHours()}:${current.getMinutes()}:${current.getSeconds()}`;\r\n      updateDoc(userDoc,\r\n        {\r\n// history: arrayUnion(\"Post^Create^\"+curdate+\"^\"+\"<a href ='/quiz/\"+topicId+\"' >\"+topic.topicTitle+\"</a>\"),\r\n\r\n      history: arrayUnion(\"Post^Create^\"+curdate+\"^\"+\"<a href ='/quiz/\"+formState.subject+\"' >\"+formState.question+\"</a>\"),\r\n        });\r\n      setOpen(false);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  const options = [\r\n    { key: \"1\", text: \"Answer 1\", value: \"answer1\" },\r\n    { key: \"2\", text: \"Answer 2\", value: \"answer2\" },\r\n    { key: \"3\", text: \"Answer 3\", value: \"answer3\" },\r\n    { key: \"4\", text: \"Answer 4\", value: \"answer4\" },\r\n  ];\r\n\r\n  return (\r\n    <Modal\r\n      onClose={() => setOpen(false)}\r\n      onOpen={() => setOpen(true)}\r\n      open={open}\r\n      trigger={<Menu.Item header style={{marginLeft:'1em'}}>Add a Quiz Question</Menu.Item>}\r\n    >\r\n      <Modal.Header>Question</Modal.Header>\r\n      <Modal.Content>\r\n        <Modal.Description>\r\n          <Form onSubmit={handleQuiz}>\r\n            <Form.Field\r\n              control={TextArea}\r\n              label=\"Question\"\r\n              value={formState.question}\r\n              id=\"question\"\r\n              onChange={handleChange}\r\n            />\r\n            <Form.Field\r\n              control={Select}\r\n              label=\"Topic Subject\"\r\n              options={subjectOptions}\r\n              placeholder=\"Subject\"\r\n              id=\"topicSubject\"\r\n              value={formState.subject}\r\n              onChange={(ev, data) => {\r\n                setFormState((prev) => ({ ...prev, subject: data.value }));\r\n              }}\r\n            />\r\n            <Form.Group widths=\"equal\">\r\n              <Form.Field\r\n                control={Input}\r\n                label=\"Answer 1\"\r\n                id=\"answer1\"\r\n                value={formState.answer1}\r\n                onChange={handleChange}\r\n              />\r\n              <Form.Field\r\n                control={Input}\r\n                label=\"Answer 2\"\r\n                id=\"answer2\"\r\n                value={formState.answer2}\r\n                onChange={handleChange}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group widths=\"equal\">\r\n              <Form.Field\r\n                control={Input}\r\n                label=\"Answer 3\"\r\n                id=\"answer3\"\r\n                value={formState.answer3}\r\n                onChange={handleChange}\r\n              />\r\n              <Form.Field\r\n                control={Input}\r\n                label=\"Answer 4\"\r\n                value={formState.answer4}\r\n                id=\"answer4\"\r\n                onChange={handleChange}\r\n              />\r\n            </Form.Group>\r\n            <Form.Field\r\n              control={Select}\r\n              label=\"Correct Answer\"\r\n              value={formState.correctAnswer}\r\n              onChange={(ev, data) => {\r\n                setFormState((prev) => ({\r\n                  ...prev,\r\n                  correctAnswer: data.value,\r\n                }));\r\n              }}\r\n              options={options}\r\n            />\r\n            <Form.Field control={Button}>Submit</Form.Field>\r\n          </Form>\r\n        </Modal.Description>\r\n      </Modal.Content>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default QuizModal;\r\n","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Dashboard\\PostModal.js",["217","218","219","220","221"],"import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Header,\r\n  Modal,\r\n  Form,\r\n  Input,\r\n  TextArea,\r\n  Dimmer,\r\n  Loader,\r\n  Link,\r\n} from \"semantic-ui-react\";\r\nimport { useUserContext } from \"../../context/userContext\";\r\nimport { db, storage } from \"../../firebase-config\";\r\n\r\nimport {\r\n  collection,\r\n  addDoc,\r\n  doc,\r\n  setDoc,\r\n  serverTimestamp,\r\n  arrayRemove,\r\n  updateDoc,\r\n  arrayUnion,\r\n  query,\r\n  where,\r\n  getDocs,\r\n} from \"firebase/firestore\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { ref, getDownloadURL, uploadBytesResumable } from \"firebase/storage\";\r\n\r\nexport function PostModal({ topicId, curComment }) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [post, setPost] = useState(\"\");\r\n\r\n  const { currentUser } = useUserContext();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const handleSubject = async (ev) => {\r\n    try {\r\n      if (post === \"\") {\r\n        return;\r\n      }\r\n      setLoading(true);\r\n      console.log(selectedFile);\r\n      const poId = uuidv4();\r\n      const postCollDoc = doc(db, \"posts\", poId);\r\n      console.log(\"he1re\");\r\n      console.log(currentUser.displayname + \"KKKKK\");\r\n\r\n      if (selectedFile) {\r\n        const storageRef = ref(storage, `images/${poId}`);\r\n        const uploadTask = uploadBytesResumable(storageRef, selectedFile);\r\n\r\n        // Listen for state changes, errors, and completion of the upload.\r\n        uploadTask.on(\r\n          \"state_changed\",\r\n          (snapshot) => {\r\n            // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\r\n            const progress =\r\n              (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n            console.log(\"Upload is \" + progress + \"% done\");\r\n            switch (snapshot.state) {\r\n              case \"paused\":\r\n                console.log(\"Upload is paused\");\r\n                break;\r\n              case \"running\":\r\n                console.log(\"Upload is running\");\r\n                break;\r\n            }\r\n          },\r\n          (error) => {\r\n            // A full list of error codes is available at\r\n            // https://firebase.google.com/docs/storage/web/handle-errors\r\n            switch (error.code) {\r\n              case \"storage/unauthorized\":\r\n                // User doesn't have permission to access the object\r\n                break;\r\n              case \"storage/canceled\":\r\n                // User canceled the upload\r\n                break;\r\n\r\n              // ...\r\n\r\n              case \"storage/unknown\":\r\n                // Unknown error occurred, inspect error.serverResponse\r\n                break;\r\n            }\r\n          },\r\n          () => {\r\n            // Upload completed successfully, now we can get the download URL\r\n            getDownloadURL(uploadTask.snapshot.ref).then(\r\n              async (downloadURL) => {\r\n                await setDoc(postCollDoc, {\r\n                  postTitle: post,\r\n                  user: currentUser.displayname,\r\n                  uid: currentUser.uid,\r\n                  topicId: topicId,\r\n                  postId: poId,\r\n                  postImage: downloadURL,\r\n                  createdAt: serverTimestamp(),\r\n                  likeId: arrayRemove(\"\"),\r\n                  dislikeId: arrayRemove(\"\"),\r\n                  pinned: false,\r\n                });\r\n                setOpen(false);\r\n                //                setFormState(initialState);\r\n                setLoading(false);\r\n              }\r\n            );\r\n          }\r\n        );\r\n      } else {\r\n        await setDoc(postCollDoc, {\r\n          postTitle: post,\r\n          user: currentUser.displayname,\r\n          uid: currentUser.uid,\r\n          topicId: topicId,\r\n          postId: poId,\r\n          createdAt: serverTimestamp(),\r\n          likeId: arrayRemove(\"\"),\r\n          dislikeId: arrayRemove(\"\"),\r\n          pinned: false,\r\n        });\r\n        const topicDoc = doc(db, \"topics\", topicId);\r\n        updateDoc(topicDoc, {\r\n          comment: curComment + 1,\r\n        });\r\n\r\n        const q = query(\r\n          collection(db, \"topics\"),\r\n          where(\"topicId\", \"==\", topicId)\r\n        );\r\n\r\n        const querySnapshot = await getDocs(q);\r\n        const [topic] = querySnapshot.docs.map((post) => post.data());\r\n\r\n        const userDoc = doc(db, \"users\", currentUser.uid);\r\n        const current = new Date();\r\n        const curdate = `${current.getDate()}/${\r\n          current.getMonth() + 1\r\n        }/${current.getFullYear()} ${current.getHours()}:${current.getMinutes()}:${current.getSeconds()}`;\r\n        updateDoc(userDoc, {\r\n          history: arrayUnion(\r\n            \"Post^Create^\" +\r\n              curdate +\r\n              \"^\" +\r\n              \"<a href ='/topic/\" +\r\n              topicId +\r\n              \"' >\" +\r\n              topic.topicTitle +\r\n              \"</a>\"\r\n          ),\r\n        });\r\n\r\n        setOpen(false);\r\n        setLoading(false);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  return (\r\n    <Modal\r\n      onClose={() => setOpen(false)}\r\n      onOpen={() => setOpen(true)}\r\n      open={open}\r\n      trigger={<Button>Post a New Answer</Button>}\r\n    >\r\n      {loading && (\r\n        <Dimmer active>\r\n          <Loader size=\"mini\">Submitting your answer....</Loader>\r\n        </Dimmer>\r\n      )}\r\n      <Modal.Header>Post</Modal.Header>\r\n      <Modal.Content>\r\n        <Modal.Description>\r\n          <Header>Post a New Answer</Header>\r\n          <Form onSubmit={handleSubject}>\r\n            <Form.Group widths=\"equal\">\r\n              <Form.Field\r\n                control={TextArea}\r\n                label=\"Post Content\"\r\n                placeholder=\"Answer to the discussion topic.\"\r\n                onChange={(ev) => setPost(ev.target.value)}\r\n                value={post}\r\n              />\r\n            </Form.Group>\r\n            <input\r\n              type=\"file\"\r\n              label=\"Image\"\r\n              onChange={(ev) => setSelectedFile(ev.target.files[0])}\r\n            />\r\n            <Form.Field control={Button} type=\"submit\">\r\n              Submit\r\n            </Form.Field>\r\n          </Form>\r\n        </Modal.Description>\r\n      </Modal.Content>\r\n    </Modal>\r\n  );\r\n}\r\n","E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Registration\\Login.js",["222","223","224","225"],"E:\\Uni\\Project\\qna_forum\\Agora v1.0.2\\src\\components\\Registration\\SignUp.js",["226","227","228","229","230","231","232","233","234","235","236"],{"ruleId":"237","replacedBy":"238"},{"ruleId":"239","replacedBy":"240"},{"ruleId":"241","severity":1,"message":"242","line":19,"column":9,"nodeType":"243","messageId":"244","endLine":19,"endColumn":24},{"ruleId":"245","severity":1,"message":"246","line":25,"column":6,"nodeType":"247","endLine":25,"endColumn":19,"suggestions":"248"},{"ruleId":"241","severity":1,"message":"249","line":7,"column":3,"nodeType":"243","messageId":"244","endLine":7,"endColumn":10},{"ruleId":"241","severity":1,"message":"250","line":12,"column":3,"nodeType":"243","messageId":"244","endLine":12,"endColumn":8},{"ruleId":"241","severity":1,"message":"251","line":14,"column":3,"nodeType":"243","messageId":"244","endLine":14,"endColumn":8},{"ruleId":"241","severity":1,"message":"252","line":15,"column":3,"nodeType":"243","messageId":"244","endLine":15,"endColumn":12},{"ruleId":"241","severity":1,"message":"253","line":27,"column":3,"nodeType":"243","messageId":"244","endLine":27,"endColumn":8},{"ruleId":"241","severity":1,"message":"254","line":37,"column":10,"nodeType":"243","messageId":"244","endLine":37,"endColumn":25},{"ruleId":"241","severity":1,"message":"255","line":39,"column":7,"nodeType":"243","messageId":"244","endLine":39,"endColumn":16},{"ruleId":"256","severity":1,"message":"257","line":55,"column":23,"nodeType":"258","messageId":"259","endLine":55,"endColumn":25},{"ruleId":"256","severity":1,"message":"257","line":55,"column":51,"nodeType":"258","messageId":"259","endLine":55,"endColumn":53},{"ruleId":"260","severity":1,"message":"261","line":66,"column":11,"nodeType":"262","messageId":"263","endLine":75,"endColumn":12},{"ruleId":"264","severity":1,"message":"265","line":67,"column":32,"nodeType":"266","messageId":"267","endLine":67,"endColumn":34},{"ruleId":"245","severity":1,"message":"268","line":84,"column":6,"nodeType":"247","endLine":84,"endColumn":8,"suggestions":"269"},{"ruleId":"260","severity":1,"message":"261","line":103,"column":5,"nodeType":"262","messageId":"263","endLine":120,"endColumn":6},{"ruleId":"256","severity":1,"message":"257","line":105,"column":27,"nodeType":"258","messageId":"259","endLine":105,"endColumn":29},{"ruleId":"256","severity":1,"message":"257","line":107,"column":52,"nodeType":"258","messageId":"259","endLine":107,"endColumn":54},{"ruleId":"256","severity":1,"message":"257","line":108,"column":55,"nodeType":"258","messageId":"259","endLine":108,"endColumn":57},{"ruleId":"260","severity":1,"message":"261","line":126,"column":5,"nodeType":"262","messageId":"263","endLine":142,"endColumn":6},{"ruleId":"256","severity":1,"message":"257","line":128,"column":27,"nodeType":"258","messageId":"259","endLine":128,"endColumn":29},{"ruleId":"256","severity":1,"message":"257","line":130,"column":52,"nodeType":"258","messageId":"259","endLine":130,"endColumn":54},{"ruleId":"256","severity":1,"message":"257","line":131,"column":55,"nodeType":"258","messageId":"259","endLine":131,"endColumn":57},{"ruleId":"241","severity":1,"message":"270","line":144,"column":9,"nodeType":"243","messageId":"244","endLine":144,"endColumn":23},{"ruleId":"256","severity":1,"message":"257","line":150,"column":48,"nodeType":"258","messageId":"259","endLine":150,"endColumn":50},{"ruleId":"256","severity":1,"message":"257","line":154,"column":33,"nodeType":"258","messageId":"259","endLine":154,"endColumn":35},{"ruleId":"256","severity":1,"message":"257","line":187,"column":44,"nodeType":"258","messageId":"259","endLine":187,"endColumn":46},{"ruleId":"241","severity":1,"message":"271","line":1,"column":10,"nodeType":"243","messageId":"244","endLine":1,"endColumn":24},{"ruleId":"241","severity":1,"message":"272","line":7,"column":3,"nodeType":"243","messageId":"244","endLine":7,"endColumn":13},{"ruleId":"241","severity":1,"message":"273","line":8,"column":3,"nodeType":"243","messageId":"244","endLine":8,"endColumn":10},{"ruleId":"241","severity":1,"message":"274","line":8,"column":3,"nodeType":"243","messageId":"244","endLine":8,"endColumn":11},{"ruleId":"241","severity":1,"message":"275","line":9,"column":3,"nodeType":"243","messageId":"244","endLine":9,"endColumn":7},{"ruleId":"241","severity":1,"message":"250","line":12,"column":3,"nodeType":"243","messageId":"244","endLine":12,"endColumn":8},{"ruleId":"241","severity":1,"message":"276","line":14,"column":3,"nodeType":"243","messageId":"244","endLine":14,"endColumn":11},{"ruleId":"241","severity":1,"message":"277","line":18,"column":3,"nodeType":"243","messageId":"244","endLine":18,"endColumn":10},{"ruleId":"241","severity":1,"message":"278","line":19,"column":3,"nodeType":"243","messageId":"244","endLine":19,"endColumn":9},{"ruleId":"241","severity":1,"message":"279","line":21,"column":16,"nodeType":"243","messageId":"244","endLine":21,"endColumn":22},{"ruleId":"241","severity":1,"message":"280","line":27,"column":3,"nodeType":"243","messageId":"244","endLine":27,"endColumn":9},{"ruleId":"241","severity":1,"message":"281","line":29,"column":3,"nodeType":"243","messageId":"244","endLine":29,"endColumn":18},{"ruleId":"241","severity":1,"message":"273","line":31,"column":3,"nodeType":"243","messageId":"244","endLine":31,"endColumn":10},{"ruleId":"241","severity":1,"message":"282","line":32,"column":3,"nodeType":"243","messageId":"244","endLine":32,"endColumn":9},{"ruleId":"241","severity":1,"message":"283","line":43,"column":11,"nodeType":"243","messageId":"244","endLine":43,"endColumn":20},{"ruleId":"241","severity":1,"message":"284","line":43,"column":22,"nodeType":"243","messageId":"244","endLine":43,"endColumn":34},{"ruleId":"245","severity":1,"message":"285","line":71,"column":6,"nodeType":"247","endLine":71,"endColumn":8,"suggestions":"286"},{"ruleId":"260","severity":1,"message":"261","line":92,"column":11,"nodeType":"262","messageId":"263","endLine":102,"endColumn":12},{"ruleId":"264","severity":1,"message":"265","line":93,"column":40,"nodeType":"266","messageId":"267","endLine":93,"endColumn":42},{"ruleId":"245","severity":1,"message":"285","line":113,"column":6,"nodeType":"247","endLine":113,"endColumn":8,"suggestions":"287"},{"ruleId":"256","severity":1,"message":"288","line":117,"column":27,"nodeType":"258","messageId":"259","endLine":117,"endColumn":29},{"ruleId":"256","severity":1,"message":"257","line":120,"column":52,"nodeType":"258","messageId":"259","endLine":120,"endColumn":54},{"ruleId":"256","severity":1,"message":"257","line":121,"column":52,"nodeType":"258","messageId":"259","endLine":121,"endColumn":54},{"ruleId":"256","severity":1,"message":"257","line":138,"column":52,"nodeType":"258","messageId":"259","endLine":138,"endColumn":54},{"ruleId":"256","severity":1,"message":"257","line":139,"column":52,"nodeType":"258","messageId":"259","endLine":139,"endColumn":54},{"ruleId":"256","severity":1,"message":"257","line":191,"column":20,"nodeType":"258","messageId":"259","endLine":191,"endColumn":22},{"ruleId":"256","severity":1,"message":"257","line":206,"column":27,"nodeType":"258","messageId":"259","endLine":206,"endColumn":29},{"ruleId":"256","severity":1,"message":"257","line":210,"column":51,"nodeType":"258","messageId":"259","endLine":210,"endColumn":53},{"ruleId":"256","severity":1,"message":"257","line":216,"column":34,"nodeType":"258","messageId":"259","endLine":216,"endColumn":36},{"ruleId":"289","severity":1,"message":"290","line":275,"column":9,"nodeType":"291","endLine":275,"endColumn":13},{"ruleId":"256","severity":1,"message":"257","line":282,"column":94,"nodeType":"258","messageId":"259","endLine":282,"endColumn":96},{"ruleId":"256","severity":1,"message":"257","line":288,"column":36,"nodeType":"258","messageId":"259","endLine":288,"endColumn":38},{"ruleId":"256","severity":1,"message":"257","line":317,"column":36,"nodeType":"258","messageId":"259","endLine":317,"endColumn":38},{"ruleId":"256","severity":1,"message":"257","line":317,"column":63,"nodeType":"258","messageId":"259","endLine":317,"endColumn":65},{"ruleId":"256","severity":1,"message":"257","line":322,"column":36,"nodeType":"258","messageId":"259","endLine":322,"endColumn":38},{"ruleId":"256","severity":1,"message":"257","line":322,"column":59,"nodeType":"258","messageId":"259","endLine":322,"endColumn":61},{"ruleId":"241","severity":1,"message":"278","line":5,"column":3,"nodeType":"243","messageId":"244","endLine":5,"endColumn":9},{"ruleId":"241","severity":1,"message":"249","line":9,"column":3,"nodeType":"243","messageId":"244","endLine":9,"endColumn":10},{"ruleId":"241","severity":1,"message":"292","line":11,"column":3,"nodeType":"243","messageId":"244","endLine":11,"endColumn":8},{"ruleId":"241","severity":1,"message":"274","line":12,"column":3,"nodeType":"243","messageId":"244","endLine":12,"endColumn":11},{"ruleId":"241","severity":1,"message":"293","line":13,"column":3,"nodeType":"243","messageId":"244","endLine":13,"endColumn":7},{"ruleId":"241","severity":1,"message":"252","line":14,"column":3,"nodeType":"243","messageId":"244","endLine":14,"endColumn":12},{"ruleId":"241","severity":1,"message":"294","line":17,"column":8,"nodeType":"243","messageId":"244","endLine":17,"endColumn":17},{"ruleId":"241","severity":1,"message":"295","line":19,"column":10,"nodeType":"243","messageId":"244","endLine":19,"endColumn":21},{"ruleId":"241","severity":1,"message":"296","line":19,"column":23,"nodeType":"243","messageId":"244","endLine":19,"endColumn":37},{"ruleId":"241","severity":1,"message":"297","line":20,"column":10,"nodeType":"243","messageId":"244","endLine":20,"endColumn":14},{"ruleId":"241","severity":1,"message":"298","line":54,"column":11,"nodeType":"243","messageId":"244","endLine":54,"endColumn":29},{"ruleId":"241","severity":1,"message":"299","line":55,"column":10,"nodeType":"243","messageId":"244","endLine":55,"endColumn":19},{"ruleId":"241","severity":1,"message":"300","line":56,"column":10,"nodeType":"243","messageId":"244","endLine":56,"endColumn":28},{"ruleId":"241","severity":1,"message":"301","line":57,"column":10,"nodeType":"243","messageId":"244","endLine":57,"endColumn":19},{"ruleId":"241","severity":1,"message":"302","line":57,"column":21,"nodeType":"243","messageId":"244","endLine":57,"endColumn":33},{"ruleId":"256","severity":1,"message":"257","line":69,"column":32,"nodeType":"258","messageId":"259","endLine":69,"endColumn":34},{"ruleId":"245","severity":1,"message":"303","line":81,"column":6,"nodeType":"247","endLine":81,"endColumn":8,"suggestions":"304"},{"ruleId":"305","severity":1,"message":"306","line":128,"column":13,"nodeType":"307","messageId":"308","endLine":135,"endColumn":14},{"ruleId":"305","severity":1,"message":"306","line":140,"column":13,"nodeType":"307","messageId":"308","endLine":153,"endColumn":14},{"ruleId":"241","severity":1,"message":"309","line":199,"column":9,"nodeType":"243","messageId":"244","endLine":199,"endColumn":28},{"ruleId":"256","severity":1,"message":"257","line":202,"column":41,"nodeType":"258","messageId":"259","endLine":202,"endColumn":43},{"ruleId":"241","severity":1,"message":"293","line":2,"column":10,"nodeType":"243","messageId":"244","endLine":2,"endColumn":14},{"ruleId":"241","severity":1,"message":"250","line":2,"column":16,"nodeType":"243","messageId":"244","endLine":2,"endColumn":21},{"ruleId":"241","severity":1,"message":"310","line":2,"column":23,"nodeType":"243","messageId":"244","endLine":2,"endColumn":27},{"ruleId":"241","severity":1,"message":"311","line":3,"column":10,"nodeType":"243","messageId":"244","endLine":3,"endColumn":14},{"ruleId":"241","severity":1,"message":"312","line":5,"column":13,"nodeType":"243","messageId":"244","endLine":5,"endColumn":20},{"ruleId":"241","severity":1,"message":"280","line":6,"column":34,"nodeType":"243","messageId":"244","endLine":6,"endColumn":40},{"ruleId":"241","severity":1,"message":"313","line":6,"column":42,"nodeType":"243","messageId":"244","endLine":6,"endColumn":45},{"ruleId":"241","severity":1,"message":"282","line":6,"column":46,"nodeType":"243","messageId":"244","endLine":6,"endColumn":52},{"ruleId":"241","severity":1,"message":"281","line":6,"column":53,"nodeType":"243","messageId":"244","endLine":6,"endColumn":68},{"ruleId":"241","severity":1,"message":"314","line":6,"column":70,"nodeType":"243","messageId":"244","endLine":6,"endColumn":81},{"ruleId":"241","severity":1,"message":"315","line":6,"column":83,"nodeType":"243","messageId":"244","endLine":6,"endColumn":92},{"ruleId":"241","severity":1,"message":"316","line":6,"column":93,"nodeType":"243","messageId":"244","endLine":6,"endColumn":103},{"ruleId":"241","severity":1,"message":"317","line":6,"column":105,"nodeType":"243","messageId":"244","endLine":6,"endColumn":111},{"ruleId":"245","severity":1,"message":"318","line":30,"column":10,"nodeType":"247","endLine":30,"endColumn":12,"suggestions":"319"},{"ruleId":"256","severity":1,"message":"288","line":61,"column":29,"nodeType":"258","messageId":"259","endLine":61,"endColumn":31},{"ruleId":"256","severity":1,"message":"288","line":61,"column":59,"nodeType":"258","messageId":"259","endLine":61,"endColumn":61},{"ruleId":"241","severity":1,"message":"251","line":7,"column":29,"nodeType":"243","messageId":"244","endLine":7,"endColumn":34},{"ruleId":"245","severity":1,"message":"320","line":33,"column":6,"nodeType":"247","endLine":33,"endColumn":8,"suggestions":"321"},{"ruleId":"322","severity":1,"message":"323","line":56,"column":53,"nodeType":"258","messageId":"324","endLine":56,"endColumn":54},{"ruleId":"241","severity":1,"message":"317","line":4,"column":3,"nodeType":"243","messageId":"244","endLine":4,"endColumn":9},{"ruleId":"241","severity":1,"message":"325","line":11,"column":27,"nodeType":"243","messageId":"244","endLine":11,"endColumn":36},{"ruleId":"241","severity":1,"message":"326","line":22,"column":3,"nodeType":"243","messageId":"244","endLine":22,"endColumn":11},{"ruleId":"241","severity":1,"message":"327","line":25,"column":22,"nodeType":"243","messageId":"244","endLine":25,"endColumn":27},{"ruleId":"241","severity":1,"message":"253","line":25,"column":29,"nodeType":"243","messageId":"244","endLine":25,"endColumn":34},{"ruleId":"241","severity":1,"message":"328","line":25,"column":36,"nodeType":"243","messageId":"244","endLine":25,"endColumn":43},{"ruleId":"241","severity":1,"message":"280","line":25,"column":45,"nodeType":"243","messageId":"244","endLine":25,"endColumn":51},{"ruleId":"305","severity":1,"message":"306","line":74,"column":13,"nodeType":"307","messageId":"308","endLine":81,"endColumn":14},{"ruleId":"305","severity":1,"message":"306","line":86,"column":13,"nodeType":"307","messageId":"308","endLine":99,"endColumn":14},{"ruleId":"241","severity":1,"message":"329","line":126,"column":15,"nodeType":"243","messageId":"244","endLine":126,"endColumn":27},{"ruleId":"241","severity":1,"message":"330","line":11,"column":8,"nodeType":"243","messageId":"244","endLine":11,"endColumn":16},{"ruleId":"331","severity":1,"message":"332","line":31,"column":11,"nodeType":"291","endLine":31,"endColumn":34},{"ruleId":"322","severity":1,"message":"323","line":29,"column":60,"nodeType":"258","messageId":"324","endLine":29,"endColumn":61},{"ruleId":"241","severity":1,"message":"274","line":4,"column":3,"nodeType":"243","messageId":"244","endLine":4,"endColumn":11},{"ruleId":"241","severity":1,"message":"333","line":7,"column":3,"nodeType":"243","messageId":"244","endLine":7,"endColumn":8},{"ruleId":"241","severity":1,"message":"334","line":13,"column":10,"nodeType":"243","messageId":"244","endLine":13,"endColumn":20},{"ruleId":"241","severity":1,"message":"327","line":13,"column":22,"nodeType":"243","messageId":"244","endLine":13,"endColumn":27},{"ruleId":"241","severity":1,"message":"253","line":13,"column":29,"nodeType":"243","messageId":"244","endLine":13,"endColumn":34},{"ruleId":"241","severity":1,"message":"328","line":13,"column":36,"nodeType":"243","messageId":"244","endLine":13,"endColumn":43},{"ruleId":"241","severity":1,"message":"280","line":13,"column":45,"nodeType":"243","messageId":"244","endLine":13,"endColumn":51},{"ruleId":"322","severity":1,"message":"323","line":57,"column":53,"nodeType":"258","messageId":"324","endLine":57,"endColumn":54},{"ruleId":"241","severity":1,"message":"335","line":7,"column":3,"nodeType":"243","messageId":"244","endLine":7,"endColumn":8},{"ruleId":"241","severity":1,"message":"311","line":11,"column":3,"nodeType":"243","messageId":"244","endLine":11,"endColumn":7},{"ruleId":"241","severity":1,"message":"280","line":18,"column":3,"nodeType":"243","messageId":"244","endLine":18,"endColumn":9},{"ruleId":"305","severity":1,"message":"306","line":64,"column":13,"nodeType":"307","messageId":"308","endLine":71,"endColumn":14},{"ruleId":"305","severity":1,"message":"306","line":76,"column":13,"nodeType":"307","messageId":"308","endLine":89,"endColumn":14},{"ruleId":"241","severity":1,"message":"336","line":5,"column":3,"nodeType":"243","messageId":"244","endLine":5,"endColumn":7},{"ruleId":"241","severity":1,"message":"278","line":6,"column":3,"nodeType":"243","messageId":"244","endLine":6,"endColumn":9},{"ruleId":"241","severity":1,"message":"249","line":8,"column":3,"nodeType":"243","messageId":"244","endLine":8,"endColumn":10},{"ruleId":"241","severity":1,"message":"337","line":21,"column":10,"nodeType":"243","messageId":"244","endLine":21,"endColumn":15},{"ruleId":"241","severity":1,"message":"278","line":5,"column":3,"nodeType":"243","messageId":"244","endLine":5,"endColumn":9},{"ruleId":"241","severity":1,"message":"292","line":11,"column":3,"nodeType":"243","messageId":"244","endLine":11,"endColumn":8},{"ruleId":"241","severity":1,"message":"274","line":12,"column":3,"nodeType":"243","messageId":"244","endLine":12,"endColumn":11},{"ruleId":"241","severity":1,"message":"280","line":16,"column":10,"nodeType":"243","messageId":"244","endLine":16,"endColumn":16},{"ruleId":"241","severity":1,"message":"334","line":16,"column":18,"nodeType":"243","messageId":"244","endLine":16,"endColumn":28},{"ruleId":"338","severity":1,"message":"339","line":44,"column":7,"nodeType":"340","messageId":"259","endLine":44,"endColumn":16},{"ruleId":"241","severity":1,"message":"341","line":55,"column":19,"nodeType":"243","messageId":"244","endLine":55,"endColumn":30},{"ruleId":"256","severity":1,"message":"257","line":62,"column":80,"nodeType":"258","messageId":"259","endLine":62,"endColumn":82},{"ruleId":"256","severity":1,"message":"257","line":72,"column":27,"nodeType":"258","messageId":"259","endLine":72,"endColumn":29},{"ruleId":"256","severity":1,"message":"257","line":73,"column":26,"nodeType":"258","messageId":"259","endLine":73,"endColumn":28},{"ruleId":"256","severity":1,"message":"257","line":75,"column":29,"nodeType":"258","messageId":"259","endLine":75,"endColumn":31},"no-native-reassign",["342"],"no-negated-in-lhs",["343"],"no-unused-vars","'updateUserEmail' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["344"],"'Message' is defined but never used.","'Label' is defined but never used.","'Image' is defined but never used.","'Container' is defined but never used.","'where' is defined but never used.","'findByLabelText' is defined but never used.","'menuStyle' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'isNotAccpeted' and 'isNotStudentRole'. Either include them or remove the dependency array.",["345"],"'checkIsTeacher' is assigned a value but never used.","'useUserContext' is defined but never used.","'onSnapshot' is defined but never used.","'orderBy' is defined but never used.","'Checkbox' is defined but never used.","'Form' is defined but never used.","'TextArea' is defined but never used.","'Segment' is defined but never used.","'Header' is defined but never used.","'uuidv4' is defined but never used.","'addDoc' is defined but never used.","'serverTimestamp' is defined but never used.","'setDoc' is defined but never used.","'formState' is assigned a value but never used.","'setFormState' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'topicId'. Either include it or remove the dependency array.",["346"],["347"],"Expected '!==' and instead saw '!='.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Check' is defined but never used.","'Icon' is defined but never used.","'AgoraLogo' is defined but never used.","'updateEmail' is defined but never used.","'updatePassword' is defined but never used.","'auth' is defined but never used.","'updateUserPassword' is assigned a value but never used.","'isSuccess' is assigned a value but never used.","'passAndConfirmPass' is assigned a value but never used.","'passValid' is assigned a value but never used.","'setPassValid' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentUser.address', 'currentUser.avatar', 'currentUser.birthdate', 'currentUser.email', 'currentUser.phone', 'currentUser.role', 'currentUser.uname', and 'formState'. Either include them or remove the dependency array.",["348"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'handleChangeTeacher' is assigned a value but never used.","'Menu' is defined but never used.","'Link' is defined but never used.","'storage' is defined but never used.","'doc' is defined but never used.","'arrayRemove' is defined but never used.","'updateDoc' is defined but never used.","'arrayUnion' is defined but never used.","'getDoc' is defined but never used.","React Hook useEffect has a missing dependency: 'currentUser.uid'. Either include it or remove the dependency array.",["349"],"React Hook useEffect has a missing dependency: 'subject'. Either include it or remove the dependency array.",["350"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'useEffect' is defined but never used.","'MenuItem' is defined but never used.","'query' is defined but never used.","'getDocs' is defined but never used.","'topicCollRef' is assigned a value but never used.","'UserIcon' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Radio' is defined but never used.","'collection' is defined but never used.","'Input' is defined but never used.","'Grid' is defined but never used.","'login' is assigned a value but never used.","no-dupe-keys","Duplicate key 'birthdate'.","ObjectExpression","'currentUser' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},{"desc":"355","fix":"357"},{"desc":"358","fix":"359"},{"desc":"360","fix":"361"},{"desc":"362","fix":"363"},"Update the dependencies array to be: [currentUser, navigate]",{"range":"364","text":"365"},"Update the dependencies array to be: [isNotAccpeted, isNotStudentRole]",{"range":"366","text":"367"},"Update the dependencies array to be: [topicId]",{"range":"368","text":"369"},{"range":"370","text":"369"},"Update the dependencies array to be: [currentUser.address, currentUser.avatar, currentUser.birthdate, currentUser.email, currentUser.phone, currentUser.role, currentUser.uname, formState]",{"range":"371","text":"372"},"Update the dependencies array to be: [currentUser.uid]",{"range":"373","text":"374"},"Update the dependencies array to be: [subject]",{"range":"375","text":"376"},[688,701],"[currentUser, navigate]",[2359,2361],"[isNotAccpeted, isNotStudentRole]",[1864,1866],"[topicId]",[3325,3327],[2444,2446],"[currentUser.address, currentUser.avatar, currentUser.birthdate, currentUser.email, currentUser.phone, currentUser.role, currentUser.uname, formState]",[1211,1213],"[currentUser.uid]",[1242,1244],"[subject]"]