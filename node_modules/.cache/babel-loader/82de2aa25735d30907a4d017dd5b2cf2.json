{"ast":null,"code":"var _jsxFileName = \"D:\\\\firebase-moodle\\\\moodle\\\\src\\\\components\\\\Topic\\\\Topic.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Sidebar } from \"../Dashboard/Sidebar\";\nimport { Button, Checkbox, Form } from \"semantic-ui-react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { collection, query, where, getDocs, addDoc, serverTimestamp, onSnapshot } from \"firebase/firestore\";\nimport { useUserContext } from \"../../context/userContext\";\nimport { db } from \"../../firebase-config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Topic = () => {\n  _s();\n\n  const {\n    topicId\n  } = useParams();\n  const {\n    currentUser\n  } = useUserContext();\n  const [posts, setPosts] = useState([]);\n  const [formState, setFormState] = useState(\"\");\n  useEffect(() => {\n    async function getPosts() {\n      try {\n        const q = query(collection(db, \"posts\"), where(\"topicId\", \"==\", topicId), orderBy(\"createdAt\", \"desc\"));\n        const unsub = await onSnapshot(q, querySnapshot => {\n          const posts = querySnapshot.docs.map(post => post.data());\n          setPosts(posts);\n        });\n        return unsub;\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    return getPosts();\n  }, []);\n\n  const handlePost = async ev => {\n    ev.preventDefault();\n\n    try {\n      if (formState === \"\") {\n        return;\n      }\n\n      const postCollRef = collection(db, \"posts\");\n      await addDoc(postCollRef, { ...formState,\n        user: currentUser.email,\n        uid: currentUser.uid,\n        topicId: topicId,\n        postId: uuidv4(),\n        createdAt: serverTimestamp()\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Sidebar, {\n    children: [\"Particular topic\", /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          value: formState,\n          placeholder: \"Add a post\",\n          onChange: ev => {\n            setFormState(ev.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Topic, \"XFBHKPMP84BrdE2oMozk88QDnro=\", false, function () {\n  return [useParams, useUserContext];\n});\n\n_c = Topic;\n\nvar _c;\n\n$RefreshReg$(_c, \"Topic\");","map":{"version":3,"sources":["D:/firebase-moodle/moodle/src/components/Topic/Topic.js"],"names":["React","useEffect","useState","useParams","Sidebar","Button","Checkbox","Form","v4","uuidv4","collection","query","where","getDocs","addDoc","serverTimestamp","onSnapshot","useUserContext","db","Topic","topicId","currentUser","posts","setPosts","formState","setFormState","getPosts","q","orderBy","unsub","querySnapshot","docs","map","post","data","err","console","log","handlePost","ev","preventDefault","postCollRef","user","email","uid","postId","createdAt","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Sidebar } from \"../Dashboard/Sidebar\";\r\nimport { Button, Checkbox, Form } from \"semantic-ui-react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport {\r\n  collection,\r\n  query,\r\n  where,\r\n  getDocs,\r\n  addDoc,\r\n  serverTimestamp,\r\n  onSnapshot,\r\n} from \"firebase/firestore\";\r\nimport { useUserContext } from \"../../context/userContext\";\r\nimport { db } from \"../../firebase-config\";\r\nexport const Topic = () => {\r\n  const { topicId } = useParams();\r\n  const { currentUser } = useUserContext();\r\n  const [posts, setPosts] = useState([]);\r\n  const [formState, setFormState] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function getPosts() {\r\n      try {\r\n        const q = query(\r\n          collection(db, \"posts\"),\r\n          where(\"topicId\", \"==\", topicId),\r\n          orderBy(\"createdAt\", \"desc\")\r\n        );\r\n\r\n        const unsub = await onSnapshot(q, (querySnapshot) => {\r\n          const posts = querySnapshot.docs.map((post) => post.data());\r\n          setPosts(posts);\r\n        });\r\n\r\n        return unsub;\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n    return getPosts();\r\n  }, []);\r\n  const handlePost = async (ev) => {\r\n    ev.preventDefault();\r\n    try {\r\n      if (formState === \"\") {\r\n        return;\r\n      }\r\n      const postCollRef = collection(db, \"posts\");\r\n      await addDoc(postCollRef, {\r\n        ...formState,\r\n        user: currentUser.email,\r\n        uid: currentUser.uid,\r\n        topicId: topicId,\r\n        postId: uuidv4(),\r\n        createdAt: serverTimestamp(),\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  return (\r\n    <Sidebar>\r\n      Particular topic\r\n      <Form>\r\n        <Form.Field>\r\n          <input\r\n            value={formState}\r\n            placeholder=\"Add a post\"\r\n            onChange={(ev) => {\r\n              setFormState(ev.target.value);\r\n            }}\r\n          />\r\n        </Form.Field>\r\n\r\n        <Button type=\"submit\">Submit</Button>\r\n      </Form>\r\n    </Sidebar>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}