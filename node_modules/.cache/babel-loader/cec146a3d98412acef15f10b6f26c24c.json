{"ast":null,"code":"var _jsxFileName = \"E:\\\\Uni\\\\Project\\\\qna_forum\\\\Agora v1.0.2\\\\src\\\\components\\\\Dashboard\\\\PostModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button, Header, Modal, Form, Input, TextArea, Dimmer, Loader, Link } from \"semantic-ui-react\";\nimport { useUserContext } from \"../../context/userContext\";\nimport { db, storage } from \"../../firebase-config\";\nimport { collection, addDoc, doc, setDoc, serverTimestamp, arrayRemove, updateDoc, arrayUnion, query, where, getDocs } from \"firebase/firestore\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { ref, getDownloadURL, uploadBytesResumable } from \"firebase/storage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function PostModal(_ref) {\n  _s();\n\n  let {\n    topicId,\n    curComment\n  } = _ref;\n  const [open, setOpen] = React.useState(false);\n  const [post, setPost] = useState(\"\");\n  const {\n    currentUser\n  } = useUserContext();\n  const [loading, setLoading] = useState(false);\n  const [selectedFile, setSelectedFile] = useState(null);\n\n  const handleSubject = async ev => {\n    try {\n      if (post === \"\") {\n        return;\n      }\n\n      setLoading(true);\n      console.log(selectedFile);\n      const poId = uuidv4();\n      const postCollDoc = doc(db, \"posts\", poId);\n      console.log(\"he1re\");\n      console.log(currentUser.displayname + \"KKKKK\");\n\n      if (selectedFile) {\n        const storageRef = ref(storage, `images/${poId}`);\n        const uploadTask = uploadBytesResumable(storageRef, selectedFile); // Listen for state changes, errors, and completion of the upload.\n\n        uploadTask.on(\"state_changed\", snapshot => {\n          // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n          const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n          console.log(\"Upload is \" + progress + \"% done\");\n\n          switch (snapshot.state) {\n            case \"paused\":\n              console.log(\"Upload is paused\");\n              break;\n\n            case \"running\":\n              console.log(\"Upload is running\");\n              break;\n          }\n        }, error => {\n          // A full list of error codes is available at\n          // https://firebase.google.com/docs/storage/web/handle-errors\n          switch (error.code) {\n            case \"storage/unauthorized\":\n              // User doesn't have permission to access the object\n              break;\n\n            case \"storage/canceled\":\n              // User canceled the upload\n              break;\n            // ...\n\n            case \"storage/unknown\":\n              // Unknown error occurred, inspect error.serverResponse\n              break;\n          }\n        }, () => {\n          // Upload completed successfully, now we can get the download URL\n          getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n            await setDoc(postCollDoc, {\n              postTitle: post,\n              user: currentUser.displayname,\n              uid: currentUser.uid,\n              topicId: topicId,\n              postId: poId,\n              postImage: downloadURL,\n              createdAt: serverTimestamp(),\n              likeId: arrayRemove(\"\"),\n              dislikeId: arrayRemove(\"\"),\n              pinned: false\n            });\n            setOpen(false); //                setFormState(initialState);\n\n            setLoading(false);\n          });\n        });\n      } else {\n        await setDoc(postCollDoc, {\n          postTitle: post,\n          user: currentUser.displayname,\n          uid: currentUser.uid,\n          topicId: topicId,\n          postId: poId,\n          createdAt: serverTimestamp(),\n          likeId: arrayRemove(\"\"),\n          dislikeId: arrayRemove(\"\"),\n          pinned: false\n        });\n        const topicDoc = doc(db, \"topics\", topicId);\n        updateDoc(topicDoc, {\n          comment: curComment + 1\n        });\n        const q = query(collection(db, \"topics\"), where(\"topicId\", \"==\", topicId));\n        const querySnapshot = await getDocs(q);\n        const [topic] = querySnapshot.docs.map(post => post.data());\n        const userDoc = doc(db, \"users\", currentUser.uid);\n        const current = new Date();\n        const curdate = `${current.getDate()}/${current.getMonth() + 1}/${current.getFullYear()} ${current.getHours()}:${current.getMinutes()}:${current.getSeconds()}`;\n        updateDoc(userDoc, {\n          history: arrayUnion(\"Post^Create^\" + curdate + \"^\" + \"<a href ='/topic/\" + topicId + \"' >\" + topic.topicTitle + \"</a>\")\n        });\n        setOpen(false);\n        setLoading(false);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: () => setOpen(false),\n    onOpen: () => setOpen(true),\n    open: open,\n    trigger: /*#__PURE__*/_jsxDEV(Button, {\n      children: \"Post a New Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 16\n    }, this),\n    children: [loading && /*#__PURE__*/_jsxDEV(Dimmer, {\n      active: true,\n      children: /*#__PURE__*/_jsxDEV(Loader, {\n        size: \"mini\",\n        children: \"Submitting your answer....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Header, {\n      children: \"Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n      children: /*#__PURE__*/_jsxDEV(Modal.Description, {\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          children: \"Add a post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleSubject,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            widths: \"equal\",\n            children: /*#__PURE__*/_jsxDEV(Form.Field, {\n              control: TextArea,\n              label: \"Post Content\",\n              placeholder: \"Content....\",\n              onChange: ev => setPost(ev.target.value),\n              value: post\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            label: \"Image\",\n            onChange: ev => setSelectedFile(ev.target.files[0])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n            control: Button,\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PostModal, \"TMT7gZwYPGgfqvTzylnEyT86mUU=\", false, function () {\n  return [useUserContext];\n});\n\n_c = PostModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostModal\");","map":{"version":3,"sources":["E:/Uni/Project/qna_forum/Agora v1.0.2/src/components/Dashboard/PostModal.js"],"names":["React","useState","Button","Header","Modal","Form","Input","TextArea","Dimmer","Loader","Link","useUserContext","db","storage","collection","addDoc","doc","setDoc","serverTimestamp","arrayRemove","updateDoc","arrayUnion","query","where","getDocs","v4","uuidv4","ref","getDownloadURL","uploadBytesResumable","PostModal","topicId","curComment","open","setOpen","post","setPost","currentUser","loading","setLoading","selectedFile","setSelectedFile","handleSubject","ev","console","log","poId","postCollDoc","displayname","storageRef","uploadTask","on","snapshot","progress","bytesTransferred","totalBytes","state","error","code","then","downloadURL","postTitle","user","uid","postId","postImage","createdAt","likeId","dislikeId","pinned","topicDoc","comment","q","querySnapshot","topic","docs","map","data","userDoc","current","Date","curdate","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","history","topicTitle","err","target","value","files"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Header,\r\n  Modal,\r\n  Form,\r\n  Input,\r\n  TextArea,\r\n  Dimmer,\r\n  Loader,\r\n  Link,\r\n} from \"semantic-ui-react\";\r\nimport { useUserContext } from \"../../context/userContext\";\r\nimport { db, storage } from \"../../firebase-config\";\r\n\r\nimport {\r\n  collection,\r\n  addDoc,\r\n  doc,\r\n  setDoc,\r\n  serverTimestamp,\r\n  arrayRemove,\r\n  updateDoc,\r\n  arrayUnion,\r\n  query,\r\n  where,\r\n  getDocs,\r\n} from \"firebase/firestore\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { ref, getDownloadURL, uploadBytesResumable } from \"firebase/storage\";\r\n\r\nexport function PostModal({ topicId, curComment }) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [post, setPost] = useState(\"\");\r\n\r\n  const { currentUser } = useUserContext();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const handleSubject = async (ev) => {\r\n    try {\r\n      if (post === \"\") {\r\n        return;\r\n      }\r\n      setLoading(true);\r\n      console.log(selectedFile);\r\n      const poId = uuidv4();\r\n      const postCollDoc = doc(db, \"posts\", poId);\r\n      console.log(\"he1re\");\r\n      console.log(currentUser.displayname + \"KKKKK\");\r\n\r\n      if (selectedFile) {\r\n        const storageRef = ref(storage, `images/${poId}`);\r\n        const uploadTask = uploadBytesResumable(storageRef, selectedFile);\r\n\r\n        // Listen for state changes, errors, and completion of the upload.\r\n        uploadTask.on(\r\n          \"state_changed\",\r\n          (snapshot) => {\r\n            // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\r\n            const progress =\r\n              (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n            console.log(\"Upload is \" + progress + \"% done\");\r\n            switch (snapshot.state) {\r\n              case \"paused\":\r\n                console.log(\"Upload is paused\");\r\n                break;\r\n              case \"running\":\r\n                console.log(\"Upload is running\");\r\n                break;\r\n            }\r\n          },\r\n          (error) => {\r\n            // A full list of error codes is available at\r\n            // https://firebase.google.com/docs/storage/web/handle-errors\r\n            switch (error.code) {\r\n              case \"storage/unauthorized\":\r\n                // User doesn't have permission to access the object\r\n                break;\r\n              case \"storage/canceled\":\r\n                // User canceled the upload\r\n                break;\r\n\r\n              // ...\r\n\r\n              case \"storage/unknown\":\r\n                // Unknown error occurred, inspect error.serverResponse\r\n                break;\r\n            }\r\n          },\r\n          () => {\r\n            // Upload completed successfully, now we can get the download URL\r\n            getDownloadURL(uploadTask.snapshot.ref).then(\r\n              async (downloadURL) => {\r\n                await setDoc(postCollDoc, {\r\n                  postTitle: post,\r\n                  user: currentUser.displayname,\r\n                  uid: currentUser.uid,\r\n                  topicId: topicId,\r\n                  postId: poId,\r\n                  postImage: downloadURL,\r\n                  createdAt: serverTimestamp(),\r\n                  likeId: arrayRemove(\"\"),\r\n                  dislikeId: arrayRemove(\"\"),\r\n                  pinned: false,\r\n                });\r\n                setOpen(false);\r\n                //                setFormState(initialState);\r\n                setLoading(false);\r\n              }\r\n            );\r\n          }\r\n        );\r\n      } else {\r\n        await setDoc(postCollDoc, {\r\n          postTitle: post,\r\n          user: currentUser.displayname,\r\n          uid: currentUser.uid,\r\n          topicId: topicId,\r\n          postId: poId,\r\n          createdAt: serverTimestamp(),\r\n          likeId: arrayRemove(\"\"),\r\n          dislikeId: arrayRemove(\"\"),\r\n          pinned: false,\r\n        });\r\n        const topicDoc = doc(db, \"topics\", topicId);\r\n        updateDoc(topicDoc, {\r\n          comment: curComment + 1,\r\n        });\r\n\r\n        const q = query(\r\n          collection(db, \"topics\"),\r\n          where(\"topicId\", \"==\", topicId)\r\n        );\r\n\r\n        const querySnapshot = await getDocs(q);\r\n        const [topic] = querySnapshot.docs.map((post) => post.data());\r\n\r\n        const userDoc = doc(db, \"users\", currentUser.uid);\r\n        const current = new Date();\r\n        const curdate = `${current.getDate()}/${\r\n          current.getMonth() + 1\r\n        }/${current.getFullYear()} ${current.getHours()}:${current.getMinutes()}:${current.getSeconds()}`;\r\n        updateDoc(userDoc, {\r\n          history: arrayUnion(\r\n            \"Post^Create^\" +\r\n              curdate +\r\n              \"^\" +\r\n              \"<a href ='/topic/\" +\r\n              topicId +\r\n              \"' >\" +\r\n              topic.topicTitle +\r\n              \"</a>\"\r\n          ),\r\n        });\r\n\r\n        setOpen(false);\r\n        setLoading(false);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  return (\r\n    <Modal\r\n      onClose={() => setOpen(false)}\r\n      onOpen={() => setOpen(true)}\r\n      open={open}\r\n      trigger={<Button>Post a New Answer</Button>}\r\n    >\r\n      {loading && (\r\n        <Dimmer active>\r\n          <Loader size=\"mini\">Submitting your answer....</Loader>\r\n        </Dimmer>\r\n      )}\r\n      <Modal.Header>Post</Modal.Header>\r\n      <Modal.Content>\r\n        <Modal.Description>\r\n          <Header>Add a post</Header>\r\n          <Form onSubmit={handleSubject}>\r\n            <Form.Group widths=\"equal\">\r\n              <Form.Field\r\n                control={TextArea}\r\n                label=\"Post Content\"\r\n                placeholder=\"Content....\"\r\n                onChange={(ev) => setPost(ev.target.value)}\r\n                value={post}\r\n              />\r\n            </Form.Group>\r\n            <input\r\n              type=\"file\"\r\n              label=\"Image\"\r\n              onChange={(ev) => setSelectedFile(ev.target.files[0])}\r\n            />\r\n            <Form.Field control={Button} type=\"submit\">\r\n              Submit\r\n            </Form.Field>\r\n          </Form>\r\n        </Modal.Description>\r\n      </Modal.Content>\r\n    </Modal>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}