{"ast":null,"code":"var _jsxFileName = \"D:\\\\firebase-moodle\\\\moodle\\\\src\\\\components\\\\Dashboard\\\\QuestionModal.js\",\n    _s = $RefreshSig$();\n\nimport { doc, getDoc, serverTimestamp } from \"firebase/firestore\";\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Header, Modal, Select, Form, Input, TextArea, Loader } from \"semantic-ui-react\";\nimport { collection, query, where, getDocs, addDoc } from \"firebase/firestore\";\nimport { db, storage } from \"../../firebase-config\";\nimport { useUserContext } from \"../../context/userContext\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { ref, getDownloadURL, uploadBytesResumable } from \"firebase/storage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  topicTitle: \"\",\n  topicSubject: \"\",\n  topicDescription: \"\"\n};\nexport function QuestionModal(_ref) {\n  _s();\n\n  let {\n    subjectOptions\n  } = _ref;\n  const [open, setOpen] = React.useState(false);\n  const {\n    currentUser\n  } = useUserContext();\n  const [loading, setLoading] = useState(false);\n  const [formState, setFormState] = useState(initialState);\n  const [selectedFile, setSelectedFile] = useState(null);\n\n  const handleChange = ev => {\n    setFormState(prev => ({ ...prev,\n      [ev.target.id]: ev.target.value\n    }));\n  };\n\n  const handleTopicSubmit = async ev => {\n    ev.preventDefault();\n\n    try {\n      if (formState.topicDescription === \"\" || formState.topicSubject === \"\" || formState.topicTitle === \"\") {\n        return;\n      }\n\n      setLoading(true);\n      console.log(selectedFile);\n\n      if (selectedFile) {\n        const storageRef = ref(storage, `images/${formState.topicSubject}`);\n        const uploadTask = uploadBytesResumable(storageRef, selectedFile); // Listen for state changes, errors, and completion of the upload.\n\n        uploadTask.on(\"state_changed\", snapshot => {\n          // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n          const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n          console.log(\"Upload is \" + progress + \"% done\");\n\n          switch (snapshot.state) {\n            case \"paused\":\n              console.log(\"Upload is paused\");\n              break;\n\n            case \"running\":\n              console.log(\"Upload is running\");\n              break;\n          }\n        }, error => {\n          // A full list of error codes is available at\n          // https://firebase.google.com/docs/storage/web/handle-errors\n          switch (error.code) {\n            case \"storage/unauthorized\":\n              // User doesn't have permission to access the object\n              break;\n\n            case \"storage/canceled\":\n              // User canceled the upload\n              break;\n            // ...\n\n            case \"storage/unknown\":\n              // Unknown error occurred, inspect error.serverResponse\n              break;\n          }\n        }, () => {\n          // Upload completed successfully, now we can get the download URL\n          getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n            const topicCollRef = collection(db, \"topics\");\n            await addDoc(topicCollRef, { ...formState,\n              user: currentUser.email,\n              topicId: uuidv4(),\n              topicImage: downloadURL,\n              createdAt: serverTimestamp()\n            });\n            setOpen(false);\n            setFormState(initialState);\n            setLoading(false);\n          });\n        });\n      } else {\n        const topicCollRef = collection(db, \"topics\");\n        await addDoc(topicCollRef, { ...formState,\n          user: currentUser.email,\n          topicId: uuidv4(),\n          createdAt: serverTimestamp()\n        });\n        setOpen(false);\n        setFormState(initialState);\n        setLoading(false);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: () => setOpen(false),\n    onOpen: () => setOpen(true),\n    open: open,\n    trigger: /*#__PURE__*/_jsxDEV(Button, {\n      children: \"Create\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 16\n    }, this),\n    children: [/*#__PURE__*/_jsxDEV(Dimmer, {\n      active: true,\n      children: /*#__PURE__*/_jsxDEV(Loader, {\n        size: \"mini\",\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Header, {\n      children: \"Topic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n      children: /*#__PURE__*/_jsxDEV(Modal.Description, {\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          children: \"Add a topic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleTopicSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            children: /*#__PURE__*/_jsxDEV(Form.Field, {\n              control: Input,\n              label: \"Topic title\",\n              placeholder: \"Add a topic\",\n              id: \"topicTitle\",\n              value: formState.topicTitle,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n            control: Select,\n            label: \"Topic Subject\",\n            options: subjectOptions,\n            placeholder: \"Subject\",\n            id: \"topicSubject\",\n            onChange: (ev, data) => {\n              setFormState(prev => ({ ...prev,\n                topicSubject: data.value\n              }));\n            },\n            value: formState.topicSubject\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n            control: TextArea,\n            label: \"Topic Description\",\n            id: \"topicDescription\",\n            placeholder: \"Add a topic description\",\n            onChange: handleChange,\n            value: formState.topicDescription\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            label: \"Image\",\n            onChange: ev => setSelectedFile(ev.target.files[0])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n            control: Button,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n\n_s(QuestionModal, \"YeF2MglKgOtSnctIBZ78ZgA6fqo=\", false, function () {\n  return [useUserContext];\n});\n\n_c = QuestionModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionModal\");","map":{"version":3,"sources":["D:/firebase-moodle/moodle/src/components/Dashboard/QuestionModal.js"],"names":["doc","getDoc","serverTimestamp","React","useState","useEffect","Button","Header","Modal","Select","Form","Input","TextArea","Loader","collection","query","where","getDocs","addDoc","db","storage","useUserContext","v4","uuidv4","ref","getDownloadURL","uploadBytesResumable","initialState","topicTitle","topicSubject","topicDescription","QuestionModal","subjectOptions","open","setOpen","currentUser","loading","setLoading","formState","setFormState","selectedFile","setSelectedFile","handleChange","ev","prev","target","id","value","handleTopicSubmit","preventDefault","console","log","storageRef","uploadTask","on","snapshot","progress","bytesTransferred","totalBytes","state","error","code","then","downloadURL","topicCollRef","user","email","topicId","topicImage","createdAt","err","data","files"],"mappings":"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","sourcesContent":["import { doc, getDoc, serverTimestamp } from \"firebase/firestore\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Header,\r\n  Modal,\r\n  Select,\r\n  Form,\r\n  Input,\r\n  TextArea,\r\n  Loader,\r\n} from \"semantic-ui-react\";\r\nimport { collection, query, where, getDocs, addDoc } from \"firebase/firestore\";\r\nimport { db, storage } from \"../../firebase-config\";\r\nimport { useUserContext } from \"../../context/userContext\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { ref, getDownloadURL, uploadBytesResumable } from \"firebase/storage\";\r\n\r\nconst initialState = {\r\n  topicTitle: \"\",\r\n  topicSubject: \"\",\r\n  topicDescription: \"\",\r\n};\r\nexport function QuestionModal({ subjectOptions }) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const { currentUser } = useUserContext();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [formState, setFormState] = useState(initialState);\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n\r\n  const handleChange = (ev) => {\r\n    setFormState((prev) => ({ ...prev, [ev.target.id]: ev.target.value }));\r\n  };\r\n\r\n  const handleTopicSubmit = async (ev) => {\r\n    ev.preventDefault();\r\n    try {\r\n      if (\r\n        formState.topicDescription === \"\" ||\r\n        formState.topicSubject === \"\" ||\r\n        formState.topicTitle === \"\"\r\n      ) {\r\n        return;\r\n      }\r\n      setLoading(true);\r\n      console.log(selectedFile);\r\n      if (selectedFile) {\r\n        const storageRef = ref(storage, `images/${formState.topicSubject}`);\r\n        const uploadTask = uploadBytesResumable(storageRef, selectedFile);\r\n\r\n        // Listen for state changes, errors, and completion of the upload.\r\n        uploadTask.on(\r\n          \"state_changed\",\r\n          (snapshot) => {\r\n            // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\r\n            const progress =\r\n              (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n            console.log(\"Upload is \" + progress + \"% done\");\r\n            switch (snapshot.state) {\r\n              case \"paused\":\r\n                console.log(\"Upload is paused\");\r\n                break;\r\n              case \"running\":\r\n                console.log(\"Upload is running\");\r\n                break;\r\n            }\r\n          },\r\n          (error) => {\r\n            // A full list of error codes is available at\r\n            // https://firebase.google.com/docs/storage/web/handle-errors\r\n            switch (error.code) {\r\n              case \"storage/unauthorized\":\r\n                // User doesn't have permission to access the object\r\n                break;\r\n              case \"storage/canceled\":\r\n                // User canceled the upload\r\n                break;\r\n\r\n              // ...\r\n\r\n              case \"storage/unknown\":\r\n                // Unknown error occurred, inspect error.serverResponse\r\n                break;\r\n            }\r\n          },\r\n          () => {\r\n            // Upload completed successfully, now we can get the download URL\r\n            getDownloadURL(uploadTask.snapshot.ref).then(\r\n              async (downloadURL) => {\r\n                const topicCollRef = collection(db, \"topics\");\r\n                await addDoc(topicCollRef, {\r\n                  ...formState,\r\n                  user: currentUser.email,\r\n                  topicId: uuidv4(),\r\n                  topicImage: downloadURL,\r\n                  createdAt: serverTimestamp(),\r\n                });\r\n                setOpen(false);\r\n                setFormState(initialState);\r\n                setLoading(false);\r\n              }\r\n            );\r\n          }\r\n        );\r\n      } else {\r\n        const topicCollRef = collection(db, \"topics\");\r\n        await addDoc(topicCollRef, {\r\n          ...formState,\r\n          user: currentUser.email,\r\n          topicId: uuidv4(),\r\n          createdAt: serverTimestamp(),\r\n        });\r\n        setOpen(false);\r\n        setFormState(initialState);\r\n        setLoading(false);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      onClose={() => setOpen(false)}\r\n      onOpen={() => setOpen(true)}\r\n      open={open}\r\n      trigger={<Button>Create</Button>}\r\n    >\r\n      <Dimmer active>\r\n        <Loader size=\"mini\">Loading</Loader>\r\n      </Dimmer>\r\n      <Modal.Header>Topic</Modal.Header>\r\n      <Modal.Content>\r\n        <Modal.Description>\r\n          <Header>Add a topic</Header>\r\n          <Form onSubmit={handleTopicSubmit}>\r\n            <Form.Group>\r\n              <Form.Field\r\n                control={Input}\r\n                label=\"Topic title\"\r\n                placeholder=\"Add a topic\"\r\n                id=\"topicTitle\"\r\n                value={formState.topicTitle}\r\n                onChange={handleChange}\r\n              />\r\n            </Form.Group>\r\n            <Form.Field\r\n              control={Select}\r\n              label=\"Topic Subject\"\r\n              options={subjectOptions}\r\n              placeholder=\"Subject\"\r\n              id=\"topicSubject\"\r\n              onChange={(ev, data) => {\r\n                setFormState((prev) => ({ ...prev, topicSubject: data.value }));\r\n              }}\r\n              value={formState.topicSubject}\r\n            />\r\n            <Form.Field\r\n              control={TextArea}\r\n              label=\"Topic Description\"\r\n              id=\"topicDescription\"\r\n              placeholder=\"Add a topic description\"\r\n              onChange={handleChange}\r\n              value={formState.topicDescription}\r\n            />\r\n            <input\r\n              type=\"file\"\r\n              label=\"Image\"\r\n              onChange={(ev) => setSelectedFile(ev.target.files[0])}\r\n            />\r\n            <Form.Field control={Button}>Submit</Form.Field>\r\n          </Form>\r\n        </Modal.Description>\r\n      </Modal.Content>\r\n    </Modal>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}